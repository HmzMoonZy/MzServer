
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class Bingo_BingoBase : Luban.BeanBase
{
    public Bingo_BingoBase(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        ID = (int)_obj.GetValue("ID");
        ConnectActivityId = (int)_obj.GetValue("ConnectActivityId");
        GameplayEndTime = (int)_obj.GetValue("GameplayEndTime");
        DailyMaxDrawCount = (int)_obj.GetValue("DailyMaxDrawCount");
        ProcessRewardCount = (int)_obj.GetValue("ProcessRewardCount");
        { var __json0 = _obj.GetValue("ProcessReward"); int _n0 = (__json0 as JArray).Count; ProcessReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  ProcessReward[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("ProcessRewardNew"); int _n0 = (__json0 as JArray).Count; ProcessRewardNew = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  ProcessRewardNew[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialItemScore"); int _n0 = (__json0 as JArray).Count; SpecialItemScore = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  SpecialItemScore[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialTimes"); int _n0 = (__json0 as JArray).Count; SpecialTimes = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  SpecialTimes[__index0++] = __v0; }   }
        ExchangeItem = (int)_obj.GetValue("ExchangeItem");
        ExchangeItem1 = (int)_obj.GetValue("ExchangeItem1");
        { var __json0 = _obj.GetValue("SpecialScoreUp"); int _n0 = (__json0 as JArray).Count; SpecialScoreUp = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpecialScoreUp[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialBingoRewardCount"); int _n0 = (__json0 as JArray).Count; SpecialBingoRewardCount = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpecialBingoRewardCount[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialSkins"); int _n0 = (__json0 as JArray).Count; SpecialSkins = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpecialSkins[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialSkinRate"); int _n0 = (__json0 as JArray).Count; SpecialSkinRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpecialSkinRate[__index0++] = __v0; }   }
        ItemId = (int)_obj.GetValue("ItemId");
        BuyDiamonds = (int)_obj.GetValue("BuyDiamonds");
        BuyLimitNum = (int)_obj.GetValue("BuyLimitNum");
        { var __json0 = _obj.GetValue("BuyLimit"); int _n0 = (__json0 as JArray).Count; BuyLimit = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  BuyLimit[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("BingoRewardCount"); int _n0 = (__json0 as JArray).Count; BingoRewardCount = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  BingoRewardCount[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("InvalidPoint"); int _n0 = (__json0 as JArray).Count; InvalidPoint = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  InvalidPoint[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("Skins"); int _n0 = (__json0 as JArray).Count; Skins = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  Skins[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SkinRate"); int _n0 = (__json0 as JArray).Count; SkinRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SkinRate[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("NormalReward"); int _n0 = (__json0 as JArray).Count; NormalReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  NormalReward[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("SpecialNormalReward"); int _n0 = (__json0 as JArray).Count; SpecialNormalReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpecialNormalReward[__index0++] = __v0; }   }
        Probability = (int)_obj.GetValue("Probability");
        { var __json0 = _obj.GetValue("MailCoins"); int _n0 = (__json0 as JArray).Count; MailCoins = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  MailCoins[__index0++] = __v0; }   }
        MailId = (string)_obj.GetValue("MailId");
        PackGroup = (int)_obj.GetValue("PackGroup");
        { var __json0 = _obj.GetValue("SpeedRates"); int _n0 = (__json0 as JArray).Count; SpeedRates = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  SpeedRates[__index0++] = __v0; }   }
    }

    public static Bingo_BingoBase DeserializeBingo_BingoBase(JToken _buf)
    {
        return new Bingo_BingoBase(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 关联的活动ID<br/>EventOpenTime表ID
    /// </summary>
    public readonly int ConnectActivityId;
    /// <summary>
    /// 玩法结束时间戳<br/>此时间到活动结束时间只能兑换<br/>
    /// </summary>
    public readonly int GameplayEndTime;
    /// <summary>
    /// 每日最大抽奖次数
    /// </summary>
    public readonly int DailyMaxDrawCount;
    /// <summary>
    /// 进度奖励需要的bingo次数
    /// </summary>
    public readonly int ProcessRewardCount;
    /// <summary>
    /// 进度奖励
    /// </summary>
    public readonly string[] ProcessReward;
    /// <summary>
    /// 新进度奖励：<br/>抽取次数，奖励表ID|
    /// </summary>
    public readonly string[] ProcessRewardNew;
    /// <summary>
    /// 每获得一个特殊模式的道具转换<br/>道具id，数量
    /// </summary>
    public readonly int[] SpecialItemScore;
    /// <summary>
    /// 随机下限，随机上限，抽取N个数<br/>每个随机上限为一个步长
    /// </summary>
    public readonly int[] SpecialTimes;
    /// <summary>
    /// 兑换物ID
    /// </summary>
    public readonly int ExchangeItem;
    /// <summary>
    /// 兑换物ID2
    /// </summary>
    public readonly int ExchangeItem1;
    /// <summary>
    /// 特殊模式中的积分放大,会放大ExchangeItem道具<br/>道具ID，放大倍率|
    /// </summary>
    public readonly string[] SpecialScoreUp;
    /// <summary>
    /// 特殊模式每轮Bingo大奖数量<br/>数量,权重|…
    /// </summary>
    public readonly string[] SpecialBingoRewardCount;
    /// <summary>
    /// 皮肤奖励<br/>itemId, itemCount|…
    /// </summary>
    public readonly string[] SpecialSkins;
    /// <summary>
    /// 皮肤出现的概率<br/>&gt;=最小轮次,&lt;=最大轮次，概率(万分比),皮肤奖励索引(从0开始)|…
    /// </summary>
    public readonly string[] SpecialSkinRate;
    /// <summary>
    /// 抽奖卷道具ID
    /// </summary>
    public readonly int ItemId;
    /// <summary>
    /// 购买抽奖卷需要的钻石数量
    /// </summary>
    public readonly int BuyDiamonds;
    /// <summary>
    /// 购买数量上限
    /// </summary>
    public readonly int BuyLimitNum;
    /// <summary>
    /// 根据钻石余量设定单次购买抽奖券上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit;
    /// <summary>
    /// 每轮Bingo大奖数量<br/>数量,权重|…
    /// </summary>
    public readonly string[] BingoRewardCount;
    /// <summary>
    /// 对应bingo大奖数量需要的无效点位<br/>大奖数量,最小无效点位数量,最大无效点位数量|…
    /// </summary>
    public readonly string[] InvalidPoint;
    /// <summary>
    /// 皮肤奖励<br/>itemId, itemCount|…
    /// </summary>
    public readonly string[] Skins;
    /// <summary>
    /// 皮肤出现的概率<br/>&gt;=最小轮次,&lt;=最大轮次，概率(万分比),皮肤奖励索引(从0开始)|…
    /// </summary>
    public readonly string[] SkinRate;
    /// <summary>
    /// 普通奖励池<br/>道具ID,道具数量,权重|…
    /// </summary>
    public readonly string[] NormalReward;
    /// <summary>
    /// 特殊模式的<br/>普通奖励池<br/>道具ID,道具数量,权重|…
    /// </summary>
    public readonly string[] SpecialNormalReward;
    /// <summary>
    /// 概率展示
    /// </summary>
    public readonly int Probability;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] MailCoins;
    /// <summary>
    /// 邮件ID<br/>测试服,正式服一致
    /// </summary>
    public readonly string MailId;
    /// <summary>
    /// 礼包组
    /// </summary>
    public readonly int PackGroup;
    /// <summary>
    /// 达到一定抽数动画速度倍率
    /// </summary>
    public readonly string[] SpeedRates;


    public const int __ID__ = -542754992;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ConnectActivityId:" + ConnectActivityId + ","
        + "GameplayEndTime:" + GameplayEndTime + ","
        + "DailyMaxDrawCount:" + DailyMaxDrawCount + ","
        + "ProcessRewardCount:" + ProcessRewardCount + ","
        + "ProcessReward:" + Luban.StringUtil.CollectionToString(ProcessReward) + ","
        + "ProcessRewardNew:" + Luban.StringUtil.CollectionToString(ProcessRewardNew) + ","
        + "SpecialItemScore:" + Luban.StringUtil.CollectionToString(SpecialItemScore) + ","
        + "SpecialTimes:" + Luban.StringUtil.CollectionToString(SpecialTimes) + ","
        + "ExchangeItem:" + ExchangeItem + ","
        + "ExchangeItem1:" + ExchangeItem1 + ","
        + "SpecialScoreUp:" + Luban.StringUtil.CollectionToString(SpecialScoreUp) + ","
        + "SpecialBingoRewardCount:" + Luban.StringUtil.CollectionToString(SpecialBingoRewardCount) + ","
        + "SpecialSkins:" + Luban.StringUtil.CollectionToString(SpecialSkins) + ","
        + "SpecialSkinRate:" + Luban.StringUtil.CollectionToString(SpecialSkinRate) + ","
        + "ItemId:" + ItemId + ","
        + "BuyDiamonds:" + BuyDiamonds + ","
        + "BuyLimitNum:" + BuyLimitNum + ","
        + "BuyLimit:" + Luban.StringUtil.CollectionToString(BuyLimit) + ","
        + "BingoRewardCount:" + Luban.StringUtil.CollectionToString(BingoRewardCount) + ","
        + "InvalidPoint:" + Luban.StringUtil.CollectionToString(InvalidPoint) + ","
        + "Skins:" + Luban.StringUtil.CollectionToString(Skins) + ","
        + "SkinRate:" + Luban.StringUtil.CollectionToString(SkinRate) + ","
        + "NormalReward:" + Luban.StringUtil.CollectionToString(NormalReward) + ","
        + "SpecialNormalReward:" + Luban.StringUtil.CollectionToString(SpecialNormalReward) + ","
        + "Probability:" + Probability + ","
        + "MailCoins:" + Luban.StringUtil.CollectionToString(MailCoins) + ","
        + "MailId:" + MailId + ","
        + "PackGroup:" + PackGroup + ","
        + "SpeedRates:" + Luban.StringUtil.CollectionToString(SpeedRates) + ","
        + "}";
    }
}
}

