
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class GameSkill_skill : Luban.BeanBase
{
    public GameSkill_skill(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        nameID = (string)_obj.GetValue("nameID");
        infoID = (string)_obj.GetValue("infoID");
        infoDetailID = (string)_obj.GetValue("infoDetailID");
        fullDetailID = (string)_obj.GetValue("fullDetailID");
        iconAtlasID = (int)_obj.GetValue("iconAtlasID");
        icon = (string)_obj.GetValue("icon");
        badgeAtlas = (int)_obj.GetValue("badgeAtlas");
        iconBadge = (string)_obj.GetValue("iconBadge");
        isShowInfoHUD = (int)_obj.GetValue("isShowInfoHUD");
        prefabID = (int)_obj.GetValue("prefabID");
        startPrefabID = (int)_obj.GetValue("startPrefabID");
        startPosID = (string)_obj.GetValue("startPosID");
        typeID = (int)_obj.GetValue("typeID");
        parameters = (string)_obj.GetValue("parameters");
        { var __json0 = _obj.GetValue("skillTypeDamageAddParams"); int _n0 = (__json0 as JArray).Count; skillTypeDamageAddParams = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  skillTypeDamageAddParams[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("skillCritTypeParams"); int _n0 = (__json0 as JArray).Count; skillCritTypeParams = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  skillCritTypeParams[__index0++] = __v0; }   }
        freedType = (int)_obj.GetValue("freedType");
        subType = (int)_obj.GetValue("subType");
        tag = (int)_obj.GetValue("tag");
        initCD = (int)_obj.GetValue("initCD");
        CD = (int)_obj.GetValue("CD");
        moveType = (int)_obj.GetValue("moveType");
        moveParam = (string)_obj.GetValue("moveParam");
        teamMoveType = (int)_obj.GetValue("teamMoveType");
        teamMoveParam = (string)_obj.GetValue("teamMoveParam");
        animID = (int)_obj.GetValue("animID");
        { var __json0 = _obj.GetValue("animEventNodes"); int _n0 = (__json0 as JArray).Count; animEventNodes = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  animEventNodes[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("fireBullets"); int _n0 = (__json0 as JArray).Count; fireBullets = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  fireBullets[__index0++] = __v0; }   }
        sortId = (int)_obj.GetValue("sortId");
        triggerConditions = (string)_obj.GetValue("triggerConditions");
        { var __json0 = _obj.GetValue("selectIDs"); int _n0 = (__json0 as JArray).Count; selectIDs = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  selectIDs[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("teamSelectIDs"); int _n0 = (__json0 as JArray).Count; teamSelectIDs = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  teamSelectIDs[__index0++] = __v0; }   }
        rangeType = (int)_obj.GetValue("rangeType");
        groupSelectMaxCount = (int)_obj.GetValue("groupSelectMaxCount");
        hurtAttributes = (string)_obj.GetValue("hurtAttributes");
        hurtAttributesFactor = (int)_obj.GetValue("hurtAttributesFactor");
        effectType = (int)_obj.GetValue("effectType");
        baseAttributes = (string)_obj.GetValue("baseAttributes");
        skillStartOwnerAddBuffs = (string)_obj.GetValue("skillStartOwnerAddBuffs");
        skillEndOwnerAddBuffs = (string)_obj.GetValue("skillEndOwnerAddBuffs");
        skillStartTargetAddBuffs = (string)_obj.GetValue("skillStartTargetAddBuffs");
        skillEndTargetAddBuffs = (string)_obj.GetValue("skillEndTargetAddBuffs");
        skillStartFriendAddBuffs = (string)_obj.GetValue("skillStartFriendAddBuffs");
        skillEndFriendAddBuffs = (string)_obj.GetValue("skillEndFriendAddBuffs");
        recharge = (int)_obj.GetValue("recharge");
        legacyPower = (int)_obj.GetValue("legacyPower");
        legacyPowerMax = (int)_obj.GetValue("legacyPowerMax");
        legacyBindmodelId = (int)_obj.GetValue("legacyBindmodelId");
        lagacyAppearFrame = (int)_obj.GetValue("lagacyAppearFrame");
        heroListId = (int)_obj.GetValue("heroListId");
        { var __json0 = _obj.GetValue("activeHeroSkill"); int _n0 = (__json0 as JArray).Count; activeHeroSkill = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  activeHeroSkill[__index0++] = __v0; }   }
        sagecraftType = (int)_obj.GetValue("sagecraftType");
        isBlack = (int)_obj.GetValue("isBlack");
        soundID = (int)_obj.GetValue("soundID");
        combat = (int)_obj.GetValue("combat");
        skillEndDelayFrame = (int)_obj.GetValue("skillEndDelayFrame");
        skillGroupId = (int)_obj.GetValue("skillGroupId");
        skillPriority = (int)_obj.GetValue("skillPriority");
        maxCount = (int)_obj.GetValue("maxCount");
        artifactId = (int)_obj.GetValue("artifactId");
        skillDamageAdd = (string)_obj.GetValue("skillDamageAdd");
        customDamageAdd = (string)_obj.GetValue("customDamageAdd");
        customFormulaAdd = (string)_obj.GetValue("customFormulaAdd");
        isEquipSkill = (int)_obj.GetValue("isEquipSkill");
        DamageStatisticsShowSkillID = (int)_obj.GetValue("DamageStatisticsShowSkillID");
        { var __json0 = _obj.GetValue("ignoreTriggerIds"); int _n0 = (__json0 as JArray).Count; ignoreTriggerIds = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  ignoreTriggerIds[__index0++] = __v0; }   }
    }

    public static GameSkill_skill DeserializeGameSkill_skill(JToken _buf)
    {
        return new GameSkill_skill(_buf);
    }

    /// <summary>
    /// 内容ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 名称多语言ID
    /// </summary>
    public readonly string nameID;
    /// <summary>
    /// 升级描述多语言ID
    /// </summary>
    public readonly string infoID;
    /// <summary>
    /// 完整描述多语言ID
    /// </summary>
    public readonly string infoDetailID;
    /// <summary>
    /// 完整描述（有具体数值的）多语言id
    /// </summary>
    public readonly string fullDetailID;
    /// <summary>
    /// icon图集ID
    /// </summary>
    public readonly int iconAtlasID;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly string icon;
    /// <summary>
    /// 图标角标图集
    /// </summary>
    public readonly int badgeAtlas;
    /// <summary>
    /// 图标角标
    /// </summary>
    public readonly string iconBadge;
    /// <summary>
    /// 是否显示技能信息HUD
    /// </summary>
    public readonly int isShowInfoHUD;
    /// <summary>
    /// prefabID
    /// </summary>
    public readonly int prefabID;
    /// <summary>
    /// 技能开始释放时特效prefabID（引自skillPrefab）<br/>填0则不生效
    /// </summary>
    public readonly int startPrefabID;
    /// <summary>
    /// 技能开始释放时挂点ID（看note表）<br/>202,1  id,方向<br/>0：以父级朝向同步（关节点正方向）<br/>1：以目标朝向同步（角色正方向）<br/>2：以世界方向朝向同步（世界正方向）
    /// </summary>
    public readonly string startPosID;
    /// <summary>
    /// 类型skillType表
    /// </summary>
    public readonly int typeID;
    /// <summary>
    /// 参数
    /// </summary>
    public readonly string parameters;
    /// <summary>
    /// 技能伤害加成类型<br/>101.普攻  102.大招<br/>201.飞刀  202.落剑<br/>203.剑气  301.火焰波  302.燃烧  401.闪电  501.冰刺  601.连击  602.反击  603.技能  604.宠物  701.凤凰火球  801.法老王暗影弹  901.堕落女王火焰  1001.白虎撕咬  1101.大天狗  1201.小丑  1301.白巫师 1401.电龙  1501.魔眼激光  1601.熊猫人  1701.硫磺火  1702.冰风暴 1801.忍术伤害
    /// </summary>
    public readonly string[] skillTypeDamageAddParams;
    /// <summary>
    /// 技能生效额外暴击率<br/>1.被动<br/>2.小招<br/>3.普攻<br/>4.大招<br/>5.传承技<br/>6.坐骑技能<br/>7.神器技能
    /// </summary>
    public readonly string[] skillCritTypeParams;
    /// <summary>
    /// 释放类型<br/>1.被动<br/>2.小招<br/>3.普攻<br/>4.大招<br/>5.传承技<br/>6.坐骑技能<br/>7.神器技能
    /// </summary>
    public readonly int freedType;
    /// <summary>
    /// 技能子类型，<br/>做特殊逻辑用<br/>601.坐骑候场技-坐骑死亡不移除<br/>602.坐骑候场技-坐骑死亡移除<br/>10001,宠物技能
    /// </summary>
    public readonly int subType;
    /// <summary>
    /// 技能标签(减CD)<br/>
    /// </summary>
    public readonly int tag;
    /// <summary>
    /// 首次使用CD（回合）
    /// </summary>
    public readonly int initCD;
    /// <summary>
    /// CD（回合）
    /// </summary>
    public readonly int CD;
    /// <summary>
    /// 移动类型：<br/>0.原地不动<br/>1.移动<br/>2.骑坐骑位移<br/>3.神器移动<br/>4.神器适配坐骑高度位移<br/>5.神器适配坐骑高度（只适配不做任何位移）<br/>6.英雄骑坐骑适配坐骑高度位移<br/>7.英雄骑坐骑适配坐骑高度（只适配不做任何位移）<br/>8 边移动边播动画
    /// </summary>
    public readonly int moveType;
    /// <summary>
    /// 移动参数
    /// </summary>
    public readonly string moveParam;
    /// <summary>
    /// 移动类型：<br/>继承moveType类型，可复用<br/>新增：<br/>101.主角移动到指定点<br/>103.神器移动到指定点
    /// </summary>
    public readonly int teamMoveType;
    /// <summary>
    /// 移动参数<br/>(posType取自CMemberBodyPosType)<br/>999.场景中心点<br/>1000.对方阵营中心点
    /// </summary>
    public readonly string teamMoveParam;
    /// <summary>
    /// 动画ID<br/>skillAnimation表<br/>填0为无技能动画
    /// </summary>
    public readonly int animID;
    /// <summary>
    /// 事件节点<br/>帧数,事件名<br/>|分割多条<br/>
    /// </summary>
    public readonly string[] animEventNodes;
    /// <summary>
    /// 每个fire事件对应的子弹（fireBulletID）
    /// </summary>
    public readonly int[] fireBullets;
    /// <summary>
    /// 技能排序id
    /// </summary>
    public readonly int sortId;
    /// <summary>
    /// 触发时机ID ! 条件数组<br/><br/>时机ID!条件ID&amp;条件ID|时机ID!条件ID&amp;条件ID
    /// </summary>
    public readonly string triggerConditions;
    /// <summary>
    /// 寻找目标逻辑ID<br/>见skillSelect表
    /// </summary>
    public readonly int[] selectIDs;
    /// <summary>
    /// 寻找目标逻辑ID<br/>见skillSelect表
    /// </summary>
    public readonly int[] teamSelectIDs;
    /// <summary>
    /// 技能范围类型<br/>1.单体<br/>2.群攻
    /// </summary>
    public readonly int rangeType;
    /// <summary>
    /// 群攻技能选择成员的数量<br/>==0 最大
    /// </summary>
    public readonly int groupSelectMaxCount;
    /// <summary>
    /// 每段属性<br/>attack=100|attack=200
    /// </summary>
    public readonly string hurtAttributes;
    /// <summary>
    /// 伤害公式系数，<br/>数值默认放大100倍
    /// </summary>
    public readonly int hurtAttributesFactor;
    /// <summary>
    /// 技能属性类型<br/>1.伤害类<br/>2.治疗类<br/>3.其他<br/>
    /// </summary>
    public readonly int effectType;
    /// <summary>
    /// 基础属性
    /// </summary>
    public readonly string baseAttributes;
    /// <summary>
    /// 技能开始时: 施法者加Buffs
    /// </summary>
    public readonly string skillStartOwnerAddBuffs;
    /// <summary>
    /// 技能结束时: 施法者加Buffs
    /// </summary>
    public readonly string skillEndOwnerAddBuffs;
    /// <summary>
    /// 技能开始时: 目标加Buffs
    /// </summary>
    public readonly string skillStartTargetAddBuffs;
    /// <summary>
    /// 技能结束时: 目标加Buffs
    /// </summary>
    public readonly string skillEndTargetAddBuffs;
    /// <summary>
    /// 技能开始时: 友方(主角)加Buffs
    /// </summary>
    public readonly string skillStartFriendAddBuffs;
    /// <summary>
    /// 技能结束时: 友方(主角)加Buffs
    /// </summary>
    public readonly string skillEndFriendAddBuffs;
    /// <summary>
    /// 充能(怒气)
    /// </summary>
    public readonly int recharge;
    /// <summary>
    /// 神力充能
    /// </summary>
    public readonly int legacyPower;
    /// <summary>
    /// 传承技触发值
    /// </summary>
    public readonly int legacyPowerMax;
    /// <summary>
    /// 传承技绑定模型id
    /// </summary>
    public readonly int legacyBindmodelId;
    /// <summary>
    /// 传承技召唤模型出现的动画帧数
    /// </summary>
    public readonly int lagacyAppearFrame;
    /// <summary>
    /// 英雄Id
    /// </summary>
    public readonly int heroListId;
    /// <summary>
    /// 解锁英雄技能动画，对应heroSkill页签
    /// </summary>
    public readonly int[] activeHeroSkill;
    /// <summary>
    /// 附魔特效<br/>1：天使<br/>2：恶魔 <br/>3：雷电<br/>4：吸血<br/>5：藏品武器<br/>6：小龙女
    /// </summary>
    public readonly int sagecraftType;
    /// <summary>
    /// 是否黑屏<br/>0否 1是
    /// </summary>
    public readonly int isBlack;
    /// <summary>
    /// 技能音效：<br/>Sound表ID
    /// </summary>
    public readonly int soundID;
    /// <summary>
    /// 战力
    /// </summary>
    public readonly int combat;
    /// <summary>
    /// 技能完成后等待帧<br/>用作动画表现等待
    /// </summary>
    public readonly int skillEndDelayFrame;
    /// <summary>
    /// 技能互斥组
    /// </summary>
    public readonly int skillGroupId;
    /// <summary>
    /// 技能替换优先级<br/>大的优先
    /// </summary>
    public readonly int skillPriority;
    /// <summary>
    /// 战斗重复技能上限
    /// </summary>
    public readonly int maxCount;
    /// <summary>
    /// 绑定神器ID
    /// </summary>
    public readonly int artifactId;
    /// <summary>
    /// 技能专属增伤属性
    /// </summary>
    public readonly string skillDamageAdd;
    /// <summary>
    /// 技能专属增伤属性<br/>0.无条件 1.对方有盾<br/>条件,动态属性id|条件,动态属性id<br/>如：0,DyAttr_1001|1,DyAttr_1002
    /// </summary>
    public readonly string customDamageAdd;
    /// <summary>
    /// 技能伤害公式动态系数<br/>0.无条件 1.对方有盾 2.动态属性有上限<br/>条件,动态属性id|条件,动态属性id|条件,动态属性id,上限<br/>如：0,DyFormulaFactor_1001|1,DyFormulaFactor_1002|2,DyFormulaFactor_1002,40
    /// </summary>
    public readonly string customFormulaAdd;
    /// <summary>
    /// 装备武器类型<br/>1.装备普攻<br/>2.装备技能
    /// </summary>
    public readonly int isEquipSkill;
    /// <summary>
    /// 伤害统计展示技能ID
    /// </summary>
    public readonly int DamageStatisticsShowSkillID;
    /// <summary>
    /// 技能忽略触发时机
    /// </summary>
    public readonly int[] ignoreTriggerIds;


    public const int __ID__ = 359710577;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nameID:" + nameID + ","
        + "infoID:" + infoID + ","
        + "infoDetailID:" + infoDetailID + ","
        + "fullDetailID:" + fullDetailID + ","
        + "iconAtlasID:" + iconAtlasID + ","
        + "icon:" + icon + ","
        + "badgeAtlas:" + badgeAtlas + ","
        + "iconBadge:" + iconBadge + ","
        + "isShowInfoHUD:" + isShowInfoHUD + ","
        + "prefabID:" + prefabID + ","
        + "startPrefabID:" + startPrefabID + ","
        + "startPosID:" + startPosID + ","
        + "typeID:" + typeID + ","
        + "parameters:" + parameters + ","
        + "skillTypeDamageAddParams:" + Luban.StringUtil.CollectionToString(skillTypeDamageAddParams) + ","
        + "skillCritTypeParams:" + Luban.StringUtil.CollectionToString(skillCritTypeParams) + ","
        + "freedType:" + freedType + ","
        + "subType:" + subType + ","
        + "tag:" + tag + ","
        + "initCD:" + initCD + ","
        + "CD:" + CD + ","
        + "moveType:" + moveType + ","
        + "moveParam:" + moveParam + ","
        + "teamMoveType:" + teamMoveType + ","
        + "teamMoveParam:" + teamMoveParam + ","
        + "animID:" + animID + ","
        + "animEventNodes:" + Luban.StringUtil.CollectionToString(animEventNodes) + ","
        + "fireBullets:" + Luban.StringUtil.CollectionToString(fireBullets) + ","
        + "sortId:" + sortId + ","
        + "triggerConditions:" + triggerConditions + ","
        + "selectIDs:" + Luban.StringUtil.CollectionToString(selectIDs) + ","
        + "teamSelectIDs:" + Luban.StringUtil.CollectionToString(teamSelectIDs) + ","
        + "rangeType:" + rangeType + ","
        + "groupSelectMaxCount:" + groupSelectMaxCount + ","
        + "hurtAttributes:" + hurtAttributes + ","
        + "hurtAttributesFactor:" + hurtAttributesFactor + ","
        + "effectType:" + effectType + ","
        + "baseAttributes:" + baseAttributes + ","
        + "skillStartOwnerAddBuffs:" + skillStartOwnerAddBuffs + ","
        + "skillEndOwnerAddBuffs:" + skillEndOwnerAddBuffs + ","
        + "skillStartTargetAddBuffs:" + skillStartTargetAddBuffs + ","
        + "skillEndTargetAddBuffs:" + skillEndTargetAddBuffs + ","
        + "skillStartFriendAddBuffs:" + skillStartFriendAddBuffs + ","
        + "skillEndFriendAddBuffs:" + skillEndFriendAddBuffs + ","
        + "recharge:" + recharge + ","
        + "legacyPower:" + legacyPower + ","
        + "legacyPowerMax:" + legacyPowerMax + ","
        + "legacyBindmodelId:" + legacyBindmodelId + ","
        + "lagacyAppearFrame:" + lagacyAppearFrame + ","
        + "heroListId:" + heroListId + ","
        + "activeHeroSkill:" + Luban.StringUtil.CollectionToString(activeHeroSkill) + ","
        + "sagecraftType:" + sagecraftType + ","
        + "isBlack:" + isBlack + ","
        + "soundID:" + soundID + ","
        + "combat:" + combat + ","
        + "skillEndDelayFrame:" + skillEndDelayFrame + ","
        + "skillGroupId:" + skillGroupId + ","
        + "skillPriority:" + skillPriority + ","
        + "maxCount:" + maxCount + ","
        + "artifactId:" + artifactId + ","
        + "skillDamageAdd:" + skillDamageAdd + ","
        + "customDamageAdd:" + customDamageAdd + ","
        + "customFormulaAdd:" + customFormulaAdd + ","
        + "isEquipSkill:" + isEquipSkill + ","
        + "DamageStatisticsShowSkillID:" + DamageStatisticsShowSkillID + ","
        + "ignoreTriggerIds:" + Luban.StringUtil.CollectionToString(ignoreTriggerIds) + ","
        + "}";
    }
}
}

