
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class Item_Item : Luban.BeanBase
{
    public Item_Item(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        { var __json0 = _obj.GetValue("useCondtion"); int _n0 = (__json0 as JArray).Count; useCondtion = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  useCondtion[__index0++] = __v0; }   }
        atlasID = (int)_obj.GetValue("atlasID");
        icon = (string)_obj.GetValue("icon");
        sixIcon = (string)_obj.GetValue("sixIcon");
        circleIcon = (string)_obj.GetValue("circleIcon");
        smallicon = (string)_obj.GetValue("smallicon");
        iconSizeType = (int)_obj.GetValue("iconSizeType");
        sixIconSizeType = (int)_obj.GetValue("sixIconSizeType");
        quality = (int)_obj.GetValue("quality");
        rank = (int)_obj.GetValue("rank");
        inPackage = (int)_obj.GetValue("inPackage");
        stackable = (int)_obj.GetValue("stackable");
        nameID = (string)_obj.GetValue("nameID");
        describeID = (string)_obj.GetValue("describeID");
        typeDescribeID = (string)_obj.GetValue("typeDescribeID");
        itemType = (int)_obj.GetValue("itemType");
        { var __json0 = _obj.GetValue("itemTypeParam"); int _n0 = (__json0 as JArray).Count; itemTypeParam = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  itemTypeParam[__index0++] = __v0; }   }
        itemGiftId = (int)_obj.GetValue("itemGiftId");
        propType = (int)_obj.GetValue("propType");
        showEffect = (int)_obj.GetValue("showEffect");
        { var __json0 = _obj.GetValue("redTypes"); int _n0 = (__json0 as JArray).Count; redTypes = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  redTypes[__index0++] = __v0; }   }
        SkinTypes = (int)_obj.GetValue("SkinTypes");
        talentLegacyUseSixRes = (int)_obj.GetValue("talentLegacyUseSixRes");
        { var __json0 = _obj.GetValue("breakItem"); int _n0 = (__json0 as JArray).Count; breakItem = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  breakItem[__index0++] = __v0; }   }
        NeedHero = (int)_obj.GetValue("NeedHero");
    }

    public static Item_Item DeserializeItem_Item(JToken _buf)
    {
        return new Item_Item(_buf);
    }

    /// <summary>
    /// 必须有的ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 使用条件(配置两个functionId是或的情况)
    /// </summary>
    public readonly int[] useCondtion;
    /// <summary>
    /// 图集名称
    /// </summary>
    public readonly int atlasID;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly string icon;
    /// <summary>
    /// 六边形图标
    /// </summary>
    public readonly string sixIcon;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly string circleIcon;
    /// <summary>
    /// 小图标（部分道具需要）
    /// </summary>
    public readonly string smallicon;
    /// <summary>
    /// icon尺寸类型<br/>0-128x128<br/>1-160x160<br/>2-200x200<br/>3-198x204<br/>4-220x220<br/>5-245x245
    /// </summary>
    public readonly int iconSizeType;
    /// <summary>
    /// icon尺寸类型<br/>0-128x128<br/>1-160x160<br/>2-200x200<br/>3-198x204<br/>4-220x220<br/>5-245x245
    /// </summary>
    public readonly int sixIconSizeType;
    /// <summary>
    /// 物品品质
    /// </summary>
    public readonly int quality;
    /// <summary>
    /// 2S<br/>3SS
    /// </summary>
    public readonly int rank;
    /// <summary>
    /// 是否在背包
    /// </summary>
    public readonly int inPackage;
    /// <summary>
    /// 是否为堆叠式道具
    /// </summary>
    public readonly int stackable;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string nameID;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string describeID;
    /// <summary>
    /// 道具展示类型多语言id
    /// </summary>
    public readonly string typeDescribeID;
    /// <summary>
    /// 道具类型
    /// </summary>
    public readonly int itemType;
    /// <summary>
    /// 类型参数
    /// </summary>
    public readonly string[] itemTypeParam;
    /// <summary>
    /// 奖励道具id
    /// </summary>
    public readonly int itemGiftId;
    /// <summary>
    /// 道具类型<br/>1、粉尘<br/>2、沙漏<br/>3、宝箱<br/>4、钥匙<br/>5、装备强化道具<br/>6、装备回退材料
    /// </summary>
    public readonly int propType;
    /// <summary>
    /// 是否显示特效<br/>0，不显示<br/>1、显示
    /// </summary>
    public readonly int showEffect;
    /// <summary>
    /// 关联红点类型集合<br/>0、无关联<br/>1、解锁头像、时装、场景
    /// </summary>
    public readonly int[] redTypes;
    /// <summary>
    /// &quot;是否需要时装预览<br/>1、avatar(头像、头像框、称号）<br/>2、skin（时装）<br/>3、SceneSkin（场景）<br/>4、坐骑<br/>5、神器
    /// </summary>
    public readonly int SkinTypes;
    /// <summary>
    /// 传承技是否使用六边形资源（英灵&amp;英灵碎片）
    /// </summary>
    public readonly int talentLegacyUseSixRes;
    /// <summary>
    /// 拆解后道具数量
    /// </summary>
    public readonly string[] breakItem;
    /// <summary>
    /// 购买时装二次确认
    /// </summary>
    public readonly int NeedHero;


    public const int __ID__ = -138460993;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "useCondtion:" + Luban.StringUtil.CollectionToString(useCondtion) + ","
        + "atlasID:" + atlasID + ","
        + "icon:" + icon + ","
        + "sixIcon:" + sixIcon + ","
        + "circleIcon:" + circleIcon + ","
        + "smallicon:" + smallicon + ","
        + "iconSizeType:" + iconSizeType + ","
        + "sixIconSizeType:" + sixIconSizeType + ","
        + "quality:" + quality + ","
        + "rank:" + rank + ","
        + "inPackage:" + inPackage + ","
        + "stackable:" + stackable + ","
        + "nameID:" + nameID + ","
        + "describeID:" + describeID + ","
        + "typeDescribeID:" + typeDescribeID + ","
        + "itemType:" + itemType + ","
        + "itemTypeParam:" + Luban.StringUtil.CollectionToString(itemTypeParam) + ","
        + "itemGiftId:" + itemGiftId + ","
        + "propType:" + propType + ","
        + "showEffect:" + showEffect + ","
        + "redTypes:" + Luban.StringUtil.CollectionToString(redTypes) + ","
        + "SkinTypes:" + SkinTypes + ","
        + "talentLegacyUseSixRes:" + talentLegacyUseSixRes + ","
        + "breakItem:" + Luban.StringUtil.CollectionToString(breakItem) + ","
        + "NeedHero:" + NeedHero + ","
        + "}";
    }
}
}

