
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class GameBuff_buff : Luban.BeanBase
{
    public GameBuff_buff(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        atlasID = (int)_obj.GetValue("atlasID");
        spriteName = (string)_obj.GetValue("spriteName");
        nameID = (string)_obj.GetValue("nameID");
        hudLanguageID = (int)_obj.GetValue("hudLanguageID");
        soundId = (int)_obj.GetValue("soundId");
        ownerType = (int)_obj.GetValue("ownerType");
        freedType = (int)_obj.GetValue("freedType");
        buffStateType = (int)_obj.GetValue("buffStateType");
        hitPrefabID = (int)_obj.GetValue("hitPrefabID");
        hitShakeID = (int)_obj.GetValue("hitShakeID");
        hitTransType = (int)_obj.GetValue("hitTransType");
        prefabID = (int)_obj.GetValue("prefabID");
        transType = (string)_obj.GetValue("transType");
        removeEffectID = (int)_obj.GetValue("removeEffectID");
        removeEffectPos = (int)_obj.GetValue("removeEffectPos");
        buffType = (int)_obj.GetValue("buffType");
        parameters = (string)_obj.GetValue("parameters");
        duration = (int)_obj.GetValue("duration");
        overlayType = (int)_obj.GetValue("overlayType");
        overlayMax = (int)_obj.GetValue("overlayMax");
        addCountRound = (int)_obj.GetValue("addCountRound");
        addAttributes = (string)_obj.GetValue("addAttributes");
        addAttributesOnce = (string)_obj.GetValue("addAttributesOnce");
        { var __json0 = _obj.GetValue("triggerTags"); int _n0 = (__json0 as JArray).Count; triggerTags = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  triggerTags[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("buffTypeDamageAddParam"); int _n0 = (__json0 as JArray).Count; buffTypeDamageAddParam = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  buffTypeDamageAddParam[__index0++] = __v0; }   }
        triggerAttributes = (string)_obj.GetValue("triggerAttributes");
        { var __json0 = _obj.GetValue("triggerBuffs"); int _n0 = (__json0 as JArray).Count; triggerBuffs = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  triggerBuffs[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("removeAddBuffs"); int _n0 = (__json0 as JArray).Count; removeAddBuffs = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  removeAddBuffs[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("removeRemoveBuffs"); int _n0 = (__json0 as JArray).Count; removeRemoveBuffs = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  removeRemoveBuffs[__index0++] = __v0; }   }
        DamageStatisticsShowSkillID = (int)_obj.GetValue("DamageStatisticsShowSkillID");
        DamageStatisticsShowBuffID = (int)_obj.GetValue("DamageStatisticsShowBuffID");
    }

    public static GameBuff_buff DeserializeGameBuff_buff(JToken _buf)
    {
        return new GameBuff_buff(_buf);
    }

    /// <summary>
    /// 内容ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 小图标图集id
    /// </summary>
    public readonly int atlasID;
    /// <summary>
    /// 小图标切片名称
    /// </summary>
    public readonly string spriteName;
    /// <summary>
    /// 名称多语言ID<br/>用于伤害统计显示
    /// </summary>
    public readonly string nameID;
    /// <summary>
    /// buff飘字
    /// </summary>
    public readonly int hudLanguageID;
    /// <summary>
    /// 触发音效
    /// </summary>
    public readonly int soundId;
    /// <summary>
    /// 施法者类型：<br/>0、无含义类型<br/>1、角色<br/>2、宠物<br/>3、坐骑
    /// </summary>
    public readonly int ownerType;
    /// <summary>
    /// 释放类型：<br/>1、普通（受保护）<br/>2、控制<br/>3、正面（增益）<br/>4、负面（削弱）
    /// </summary>
    public readonly int freedType;
    /// <summary>
    /// buff状态类型：<br/>0、无含义类型<br/>1、毒    2、眩晕<br/>3、冰冻    4、减防<br/>5、沉默    6、灼烧<br/>7、裁决    8、易伤<br/>9、流血    10、剑意<br/>11、震慑    12、猫魂<br/>13、棍式  14、太空行走  15、怒意 16、英勇
    /// </summary>
    public readonly int buffStateType;
    /// <summary>
    /// 受击prefabID（引自ArtHit）<br/>填0则不生效<br/>
    /// </summary>
    public readonly int hitPrefabID;
    /// <summary>
    /// 受击震屏
    /// </summary>
    public readonly int hitShakeID;
    /// <summary>
    /// 挂点位置<br/>0脚底<br/>1盆骨<br/>2中心<br/>3左手<br/>4右手<br/>5头<br/>6血条<br/>7头顶正上方
    /// </summary>
    public readonly int hitTransType;
    /// <summary>
    /// Buff 特效(ArtBuff ID)<br/>
    /// </summary>
    public readonly int prefabID;
    /// <summary>
    /// 挂点位置<br/>0脚底<br/>1盆骨<br/>2中心<br/>3左手<br/>4右手<br/>5头<br/>6血条<br/>7头顶正上方<br/>300动态缩放-脚底<br/>301动态缩放-盆骨<br/>302动态缩放-中心<br/>303动态缩放-左手<br/>304动态缩放-右手<br/>305动态缩放-头<br/>306动态缩放-血条<br/>307动态缩放-头顶正上方
    /// </summary>
    public readonly string transType;
    /// <summary>
    /// Buff移除特效显示
    /// </summary>
    public readonly int removeEffectID;
    /// <summary>
    /// Buff移除特效挂点位置：<br/>0脚底<br/>1盆骨<br/>2中心<br/>3左手<br/>4右手<br/>5头<br/>6血条<br/>7头顶正上方
    /// </summary>
    public readonly int removeEffectPos;
    /// <summary>
    /// 类型ID
    /// </summary>
    public readonly int buffType;
    /// <summary>
    /// 默认参数
    /// </summary>
    public readonly string parameters;
    /// <summary>
    /// 持续回合数
    /// </summary>
    public readonly int duration;
    /// <summary>
    /// overlayType类型id(小类型)
    /// </summary>
    public readonly int overlayType;
    /// <summary>
    /// buff效果最大叠加次数
    /// </summary>
    public readonly int overlayMax;
    /// <summary>
    /// 添加的回合计算回合数<br/>0 不计算 1计算
    /// </summary>
    public readonly int addCountRound;
    /// <summary>
    /// 增加属性表(buff结束属性删除)
    /// </summary>
    public readonly string addAttributes;
    /// <summary>
    /// 增加属性表(buff结束属性不删除)
    /// </summary>
    public readonly string addAttributesOnce;
    /// <summary>
    /// buff触发类型<br/>参考#buffTrigger
    /// </summary>
    public readonly int[] triggerTags;
    /// <summary>
    /// 技能伤害加成类型<br/>101.普攻  102.大招<br/>201.飞刀  202.落剑<br/>203.剑气  301.火焰波<br/>302.灼烧  401.闪电<br/>501.冰刺  601.连击伤害<br/>602 反击伤害 603 技能伤害<br/>604 宠物伤害 
    /// </summary>
    public readonly int[] buffTypeDamageAddParam;
    /// <summary>
    /// 触发伤害类型及数值
    /// </summary>
    public readonly string triggerAttributes;
    /// <summary>
    /// 触发Buff
    /// </summary>
    public readonly int[] triggerBuffs;
    /// <summary>
    /// Buff移除时增加Buff
    /// </summary>
    public readonly int[] removeAddBuffs;
    /// <summary>
    /// Buff移除时删除Buff
    /// </summary>
    public readonly int[] removeRemoveBuffs;
    /// <summary>
    /// 伤害统计展示技能ID
    /// </summary>
    public readonly int DamageStatisticsShowSkillID;
    /// <summary>
    /// 伤害统计展示BuffID
    /// </summary>
    public readonly int DamageStatisticsShowBuffID;


    public const int __ID__ = 1371621581;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "atlasID:" + atlasID + ","
        + "spriteName:" + spriteName + ","
        + "nameID:" + nameID + ","
        + "hudLanguageID:" + hudLanguageID + ","
        + "soundId:" + soundId + ","
        + "ownerType:" + ownerType + ","
        + "freedType:" + freedType + ","
        + "buffStateType:" + buffStateType + ","
        + "hitPrefabID:" + hitPrefabID + ","
        + "hitShakeID:" + hitShakeID + ","
        + "hitTransType:" + hitTransType + ","
        + "prefabID:" + prefabID + ","
        + "transType:" + transType + ","
        + "removeEffectID:" + removeEffectID + ","
        + "removeEffectPos:" + removeEffectPos + ","
        + "buffType:" + buffType + ","
        + "parameters:" + parameters + ","
        + "duration:" + duration + ","
        + "overlayType:" + overlayType + ","
        + "overlayMax:" + overlayMax + ","
        + "addCountRound:" + addCountRound + ","
        + "addAttributes:" + addAttributes + ","
        + "addAttributesOnce:" + addAttributesOnce + ","
        + "triggerTags:" + Luban.StringUtil.CollectionToString(triggerTags) + ","
        + "buffTypeDamageAddParam:" + Luban.StringUtil.CollectionToString(buffTypeDamageAddParam) + ","
        + "triggerAttributes:" + triggerAttributes + ","
        + "triggerBuffs:" + Luban.StringUtil.CollectionToString(triggerBuffs) + ","
        + "removeAddBuffs:" + Luban.StringUtil.CollectionToString(removeAddBuffs) + ","
        + "removeRemoveBuffs:" + Luban.StringUtil.CollectionToString(removeRemoveBuffs) + ","
        + "DamageStatisticsShowSkillID:" + DamageStatisticsShowSkillID + ","
        + "DamageStatisticsShowBuffID:" + DamageStatisticsShowBuffID + ","
        + "}";
    }
}
}

