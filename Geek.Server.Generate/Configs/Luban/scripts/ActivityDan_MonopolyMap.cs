
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class ActivityDan_MonopolyMap : Luban.BeanBase
{
    public ActivityDan_MonopolyMap(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        ID = (int)_obj.GetValue("ID");
        ThemeId = (int)_obj.GetValue("ThemeId");
        type = (int)_obj.GetValue("type");
        { var __json0 = _obj.GetValue("factor"); int _n0 = (__json0 as JArray).Count; factor = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  factor[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("magicUp"); int _n0 = (__json0 as JArray).Count; magicUp = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  magicUp[__index0++] = __v0; }   }
        next = (int)_obj.GetValue("next");
        weight = (int)_obj.GetValue("weight");
    }

    public static ActivityDan_MonopolyMap DeserializeActivityDan_MonopolyMap(JToken _buf)
    {
        return new ActivityDan_MonopolyMap(_buf);
    }

    /// <summary>
    /// 序号
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 不同主题用不同地图
    /// </summary>
    public readonly int ThemeId;
    /// <summary>
    /// 格子类型<br/>1.开始格子<br/>2.奖励格子<br/>3.分叉格子<br/>4.火车开始格<br/>5.魔法格子<br/>6.监狱格子<br/>7.累计奖励格子<br/>8.子格子，仅参与拼接<br/>9.小游戏<br/>10.温泉格
    /// </summary>
    public readonly int type;
    /// <summary>
    /// 格子类型参数，根据type<br/>1.开始格子给的星星数<br/>2.奖励的dropid<br/>3.若停留在分叉格上，之后走的下一个格子<br/>4.若停留在火车格上，之后走的格子|一共要走几个格子<br/>5.无配置<br/>6.投两个骰子的可尝试次数<br/>7.初始或每次领取之后的默认骰子数<br/>8.主格子，与哪个格子拼<br/>9.小游戏：类型1|id1|权重1|类型2|id2|权重2…<br/>10.温泉格:累计格Id|给累积格增加的骰子数
    /// </summary>
    public readonly int[] factor;
    /// <summary>
    /// 魔法格子升级效果，根据Type<br/><br/>1.开始格子给的星星数<br/><br/>2.奖励的dropid<br/><br/>3.必走高级格子，无配置<br/><br/>4.必走火车格子，无配置<br/><br/>5.不会随机到，无配置<br/><br/>6.必一次投出相同的骰子，无配置<br/><br/>7.立即增加已累计的骰子数<br/><br/>8.无配置
    /// </summary>
    public readonly int[] magicUp;
    /// <summary>
    /// 下一格子
    /// </summary>
    public readonly int next;
    /// <summary>
    /// 初始权重
    /// </summary>
    public readonly int weight;


    public const int __ID__ = 1372403376;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ThemeId:" + ThemeId + ","
        + "type:" + type + ","
        + "factor:" + Luban.StringUtil.CollectionToString(factor) + ","
        + "magicUp:" + Luban.StringUtil.CollectionToString(magicUp) + ","
        + "next:" + next + ","
        + "weight:" + weight + ","
        + "}";
    }
}
}

