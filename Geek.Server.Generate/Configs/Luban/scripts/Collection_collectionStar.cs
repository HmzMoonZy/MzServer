
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class Collection_collectionStar : Luban.BeanBase
{
    public Collection_collectionStar(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        tagId = _buf.ReadInt();
        star = _buf.ReadInt();
        basicAttribute = _buf.ReadString();
        effectTimes = _buf.ReadInt();
        effectAttributeEx = _buf.ReadString();
        effectType = _buf.ReadInt();
        effectConditionValue = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);effectParam = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); effectParam[__index0] = __e0;}}
        effectParam2 = _buf.ReadString();
        upStarDescId = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);starItemCost = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); starItemCost[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);starItemCostNew = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); starItemCostNew[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);compensate = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); compensate[__index0] = __e0;}}
        conditionTalentId = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);power = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); power[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);activePower = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); activePower[__index0] = __e0;}}
    }

    public static Collection_collectionStar DeserializeCollection_collectionStar(ByteBuf _buf)
    {
        return new Collection_collectionStar(_buf);
    }

    /// <summary>
    /// 升级id<br/>藏品被动*100 + 星级
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 效果ID
    /// </summary>
    public readonly int tagId;
    /// <summary>
    /// 星级
    /// </summary>
    public readonly int star;
    /// <summary>
    /// 基础效果
    /// </summary>
    public readonly string basicAttribute;
    /// <summary>
    /// 被动效果生效次数
    /// </summary>
    public readonly int effectTimes;
    /// <summary>
    /// 被动效果补充属性
    /// </summary>
    public readonly string effectAttributeEx;
    /// <summary>
    /// 改变宠物的效果类型<br/>1改变其自带技能<br/>2获得新技能<br/>3增加宠物自身属性<br/>4属性提升<br/>5提升装备基础属性万分比（攻|防|血）
    /// </summary>
    public readonly int effectType;
    /// <summary>
    /// 装备品质&gt;=<br/>equipCompose ID
    /// </summary>
    public readonly int effectConditionValue;
    /// <summary>
    /// 效果参数<br/>1:equip表的id<br/>5：攻击|防御|血量
    /// </summary>
    public readonly int[] effectParam;
    /// <summary>
    /// 效果参数2<br/>用于字符串相关表达
    /// </summary>
    public readonly string effectParam2;
    /// <summary>
    /// 宠物藏品升星描述
    /// </summary>
    public readonly string upStarDescId;
    /// <summary>
    /// 升星道具消耗
    /// </summary>
    public readonly string[] starItemCost;
    /// <summary>
    /// 升星道具消耗
    /// </summary>
    public readonly string[] starItemCostNew;
    /// <summary>
    /// 降低升星消耗一次性补偿自选箱
    /// </summary>
    public readonly string[] compensate;
    /// <summary>
    /// 升级条件(天赋阶段id)
    /// </summary>
    public readonly int conditionTalentId;
    /// <summary>
    /// 层数2万分比战力<br/>层数3万分比战力<br/>（拥有增加战力）
    /// </summary>
    public readonly int[] power;
    /// <summary>
    /// 层数2万分比战力<br/>层数3万分比战力<br/>（上阵增加战力）
    /// </summary>
    public readonly int[] activePower;
   
    public const int __ID__ = -1729431119;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "tagId:" + tagId + ","
        + "star:" + star + ","
        + "basicAttribute:" + basicAttribute + ","
        + "effectTimes:" + effectTimes + ","
        + "effectAttributeEx:" + effectAttributeEx + ","
        + "effectType:" + effectType + ","
        + "effectConditionValue:" + effectConditionValue + ","
        + "effectParam:" + Luban.StringUtil.CollectionToString(effectParam) + ","
        + "effectParam2:" + effectParam2 + ","
        + "upStarDescId:" + upStarDescId + ","
        + "starItemCost:" + Luban.StringUtil.CollectionToString(starItemCost) + ","
        + "starItemCostNew:" + Luban.StringUtil.CollectionToString(starItemCostNew) + ","
        + "compensate:" + Luban.StringUtil.CollectionToString(compensate) + ","
        + "conditionTalentId:" + conditionTalentId + ","
        + "power:" + Luban.StringUtil.CollectionToString(power) + ","
        + "activePower:" + Luban.StringUtil.CollectionToString(activePower) + ","
        + "}";
    }
}

}

