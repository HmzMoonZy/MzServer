
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class ActivityDan_MonopolyBase : Luban.BeanBase
{
    public ActivityDan_MonopolyBase(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        NameId = _buf.ReadString();
        ThemeId = _buf.ReadInt();
        DiceItem = _buf.ReadInt();
        MagicDicItem = _buf.ReadInt();
        StarItem = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);multiRate = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); multiRate[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);guaranteeRate = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); guaranteeRate[__index0] = __e0;}}
        DicePrice = _buf.ReadInt();
        DefaultDice = _buf.ReadInt();
        RankNum = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BigReward = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BigReward[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ClearTime = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); ClearTime[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimit = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimit[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MailCoins = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); MailCoins[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RebackMailID = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); RebackMailID[__index0] = __e0;}}
        resetDice = _buf.ReadInt();
        battlePassId = _buf.ReadInt();
        ExchangeGroup = _buf.ReadInt();
        ExchangeItem = _buf.ReadInt();
        PackGroup = _buf.ReadInt();
    }

    public static ActivityDan_MonopolyBase DeserializeActivityDan_MonopolyBase(ByteBuf _buf)
    {
        return new ActivityDan_MonopolyBase(_buf);
    }

    /// <summary>
    /// 关联EventOpenTime表ID
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 活动名Id
    /// </summary>
    public readonly string NameId;
    /// <summary>
    /// 主题Id
    /// </summary>
    public readonly int ThemeId;
    /// <summary>
    /// 骰子道具
    /// </summary>
    public readonly int DiceItem;
    /// <summary>
    /// 魔法骰子道具
    /// </summary>
    public readonly int MagicDicItem;
    /// <summary>
    /// 星星道具
    /// </summary>
    public readonly int StarItem;
    /// <summary>
    /// 倍率
    /// </summary>
    public readonly int[] multiRate;
    /// <summary>
    /// 保底倍率
    /// </summary>
    public readonly int[] guaranteeRate;
    /// <summary>
    /// 骰子售价，钻石
    /// </summary>
    public readonly int DicePrice;
    /// <summary>
    /// 初始赠送骰子个数
    /// </summary>
    public readonly int DefaultDice;
    /// <summary>
    /// 排行榜单组人数
    /// </summary>
    public readonly int RankNum;
    /// <summary>
    /// 累计星星奖励：<br/><br/>累计几个星星，奖励表ID|
    /// </summary>
    public readonly string[] BigReward;
    /// <summary>
    /// 排行榜重组时间点<br/><br/>距离活动开启时间过去X秒
    /// </summary>
    public readonly int[] ClearTime;
    /// <summary>
    /// 根据钻石余量设定单次购买抽奖券上限<br/><br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] MailCoins;
    /// <summary>
    /// 补偿邮件
    /// </summary>
    public readonly string[] RebackMailID;
    /// <summary>
    /// 多少次骰子重置权重
    /// </summary>
    public readonly int resetDice;
    /// <summary>
    /// BP的ID
    /// </summary>
    public readonly int battlePassId;
    /// <summary>
    /// 兑换组
    /// </summary>
    public readonly int ExchangeGroup;
    /// <summary>
    /// 兑换物ID
    /// </summary>
    public readonly int ExchangeItem;
    /// <summary>
    /// 礼包组
    /// </summary>
    public readonly int PackGroup;
   
    public const int __ID__ = -405495811;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "NameId:" + NameId + ","
        + "ThemeId:" + ThemeId + ","
        + "DiceItem:" + DiceItem + ","
        + "MagicDicItem:" + MagicDicItem + ","
        + "StarItem:" + StarItem + ","
        + "multiRate:" + Luban.StringUtil.CollectionToString(multiRate) + ","
        + "guaranteeRate:" + Luban.StringUtil.CollectionToString(guaranteeRate) + ","
        + "DicePrice:" + DicePrice + ","
        + "DefaultDice:" + DefaultDice + ","
        + "RankNum:" + RankNum + ","
        + "BigReward:" + Luban.StringUtil.CollectionToString(BigReward) + ","
        + "ClearTime:" + Luban.StringUtil.CollectionToString(ClearTime) + ","
        + "BuyLimit:" + Luban.StringUtil.CollectionToString(BuyLimit) + ","
        + "MailCoins:" + Luban.StringUtil.CollectionToString(MailCoins) + ","
        + "RebackMailID:" + Luban.StringUtil.CollectionToString(RebackMailID) + ","
        + "resetDice:" + resetDice + ","
        + "battlePassId:" + battlePassId + ","
        + "ExchangeGroup:" + ExchangeGroup + ","
        + "ExchangeItem:" + ExchangeItem + ","
        + "PackGroup:" + PackGroup + ","
        + "}";
    }
}

}

