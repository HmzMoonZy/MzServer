
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class ActvGeneral_ActBattlePass : Luban.BeanBase
{
    public ActvGeneral_ActBattlePass(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        group = (int)_obj.GetValue("group");
        themeId = (int)_obj.GetValue("themeId");
        purchaseId = (int)_obj.GetValue("purchaseId");
        playEndCanPurchase = (int)_obj.GetValue("playEndCanPurchase");
        tga_bp_type = (string)_obj.GetValue("tga_bp_type");
        tga_event_name = (string)_obj.GetValue("tga_event_name");
        name = (string)_obj.GetValue("name");
        bottomTipId = (string)_obj.GetValue("bottomTipId");
        atlasID = (int)_obj.GetValue("atlasID");
        itemIcon = (string)_obj.GetValue("itemIcon");
        finalRewardLimit = (int)_obj.GetValue("finalRewardLimit");
        finalRewardType = (int)_obj.GetValue("finalRewardType");
        { var __json0 = _obj.GetValue("finalQualityRandom"); int _n0 = (__json0 as JArray).Count; finalQualityRandom = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  finalQualityRandom[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("finalDrop"); int _n0 = (__json0 as JArray).Count; finalDrop = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  finalDrop[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("upgradeRate"); int _n0 = (__json0 as JArray).Count; upgradeRate = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  upgradeRate[__index0++] = __v0; }   }
        bigRewardDesc = (string)_obj.GetValue("bigRewardDesc");
        { var __json0 = _obj.GetValue("bigRewardShow"); int _n0 = (__json0 as JArray).Count; bigRewardShow = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  bigRewardShow[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("delItems"); int _n0 = (__json0 as JArray).Count; delItems = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  delItems[__index0++] = __v0; }   }
    }

    public static ActvGeneral_ActBattlePass DeserializeActvGeneral_ActBattlePass(JToken _buf)
    {
        return new ActvGeneral_ActBattlePass(_buf);
    }

    /// <summary>
    /// 编号
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 对应奖励条目组
    /// </summary>
    public readonly int group;
    /// <summary>
    /// 美术主题风格Id
    /// </summary>
    public readonly int themeId;
    /// <summary>
    /// 充值id
    /// </summary>
    public readonly int purchaseId;
    /// <summary>
    /// 活动玩法结束后是否能购买
    /// </summary>
    public readonly int playEndCanPurchase;
    /// <summary>
    /// tga打点bp_type（用中文）
    /// </summary>
    public readonly string tga_bp_type;
    /// <summary>
    /// tga打点event_name（用中文）
    /// </summary>
    public readonly string tga_event_name;
    /// <summary>
    /// 活动名称多语言
    /// </summary>
    public readonly string name;
    /// <summary>
    /// 底部提示语言Id
    /// </summary>
    public readonly string bottomTipId;
    /// <summary>
    /// 图集名称
    /// </summary>
    public readonly int atlasID;
    /// <summary>
    /// 活动道具图标
    /// </summary>
    public readonly string itemIcon;
    /// <summary>
    /// 最终循环奖励次数<br/>0或不配则无循环奖励<br/>配&lt;0则循环奖励无次数限制
    /// </summary>
    public readonly int finalRewardLimit;
    /// <summary>
    /// 1直接读取item-drop<br/>2可升级
    /// </summary>
    public readonly int finalRewardType;
    /// <summary>
    /// 循环奖励初始品质随机<br/>（品质1,权重|...)
    /// </summary>
    public readonly string[] finalQualityRandom;
    /// <summary>
    /// 最终奖励
    /// </summary>
    public readonly int[] finalDrop;
    /// <summary>
    /// 升品概率（万分比）
    /// </summary>
    public readonly int[] upgradeRate;
    /// <summary>
    /// 大奖展示文本
    /// </summary>
    public readonly string bigRewardDesc;
    /// <summary>
    /// 大奖展示图标
    /// </summary>
    public readonly string[] bigRewardShow;
    /// <summary>
    /// 删除道具
    /// </summary>
    public readonly string[] delItems;


    public const int __ID__ = -2103493632;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "group:" + group + ","
        + "themeId:" + themeId + ","
        + "purchaseId:" + purchaseId + ","
        + "playEndCanPurchase:" + playEndCanPurchase + ","
        + "tga_bp_type:" + tga_bp_type + ","
        + "tga_event_name:" + tga_event_name + ","
        + "name:" + name + ","
        + "bottomTipId:" + bottomTipId + ","
        + "atlasID:" + atlasID + ","
        + "itemIcon:" + itemIcon + ","
        + "finalRewardLimit:" + finalRewardLimit + ","
        + "finalRewardType:" + finalRewardType + ","
        + "finalQualityRandom:" + Luban.StringUtil.CollectionToString(finalQualityRandom) + ","
        + "finalDrop:" + Luban.StringUtil.CollectionToString(finalDrop) + ","
        + "upgradeRate:" + Luban.StringUtil.CollectionToString(upgradeRate) + ","
        + "bigRewardDesc:" + bigRewardDesc + ","
        + "bigRewardShow:" + Luban.StringUtil.CollectionToString(bigRewardShow) + ","
        + "delItems:" + Luban.StringUtil.CollectionToString(delItems) + ","
        + "}";
    }
}
}

