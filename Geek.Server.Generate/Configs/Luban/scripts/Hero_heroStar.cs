
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class Hero_heroStar : Luban.BeanBase
{
    public Hero_heroStar(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        groupID = _buf.ReadInt();
        star = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);starUpCost = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); starUpCost[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);heroAttr = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); heroAttr[__index0] = __e0;}}
        starupDesc = _buf.ReadString();
        skillType = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);skills = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); skills[__index0] = __e0;}}
        skillsGroup = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);skillsLv = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); skillsLv[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);skillQuality = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); skillQuality[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);starEffect = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); starEffect[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);activePower = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); activePower[__index0] = __e0;}}
    }

    public static Hero_heroStar DeserializeHero_heroStar(ByteBuf _buf)
    {
        return new Hero_heroStar(_buf);
    }

    /// <summary>
    /// 英雄ID*100+星级
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 英雄组
    /// </summary>
    public readonly int groupID;
    /// <summary>
    /// 星级
    /// </summary>
    public readonly int star;
    /// <summary>
    /// 升星消耗
    /// </summary>
    public readonly string[] starUpCost;
    /// <summary>
    /// 主角属性增加（最终值）
    /// </summary>
    public readonly string[] heroAttr;
    /// <summary>
    /// 升星效果描述
    /// </summary>
    public readonly string starupDesc;
    /// <summary>
    /// 词条类型<br/>1【全局】获得后永久生效，无需上阵<br/>2.【本体】上阵时生效<br/>3.【英雄全局】获得后永久生效，无需上阵<br/>4.【英雄本体】上阵时生效
    /// </summary>
    public readonly int skillType;
    /// <summary>
    /// 解锁英雄特性技能<br/>累计(只会投放技能）
    /// </summary>
    public readonly int[] skills;
    /// <summary>
    /// 技能分组
    /// </summary>
    public readonly int skillsGroup;
    /// <summary>
    /// 技能等级
    /// </summary>
    public readonly int[] skillsLv;
    /// <summary>
    /// 技能对应的品质
    /// </summary>
    public readonly int[] skillQuality;
    /// <summary>
    /// 星级效果(只会投放属性)
    /// </summary>
    public readonly string[] starEffect;
    /// <summary>
    /// 层数2万分比战力<br/>层数3万分比战力<br/>（上阵增加战力）
    /// </summary>
    public readonly int[] activePower;
   
    public const int __ID__ = 941664241;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "groupID:" + groupID + ","
        + "star:" + star + ","
        + "starUpCost:" + Luban.StringUtil.CollectionToString(starUpCost) + ","
        + "heroAttr:" + Luban.StringUtil.CollectionToString(heroAttr) + ","
        + "starupDesc:" + starupDesc + ","
        + "skillType:" + skillType + ","
        + "skills:" + Luban.StringUtil.CollectionToString(skills) + ","
        + "skillsGroup:" + skillsGroup + ","
        + "skillsLv:" + Luban.StringUtil.CollectionToString(skillsLv) + ","
        + "skillQuality:" + Luban.StringUtil.CollectionToString(skillQuality) + ","
        + "starEffect:" + Luban.StringUtil.CollectionToString(starEffect) + ","
        + "activePower:" + Luban.StringUtil.CollectionToString(activePower) + ","
        + "}";
    }
}

}

