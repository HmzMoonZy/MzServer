
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class EventFishing_fishingBase : Luban.BeanBase
{
    public EventFishing_fishingBase(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        ID = (int)_obj.GetValue("ID");
        FishBaitItem = (int)_obj.GetValue("FishBaitItem");
        FishPointItem = (int)_obj.GetValue("FishPointItem");
        FishLineItem = (int)_obj.GetValue("FishLineItem");
        FishKingItem = (int)_obj.GetValue("FishKingItem");
        PackGroup = (int)_obj.GetValue("PackGroup");
        FishBaitPrice = (int)_obj.GetValue("FishBaitPrice");
        LimitTimes = (int)_obj.GetValue("LimitTimes");
        { var __json0 = _obj.GetValue("BuyLimit"); int _n0 = (__json0 as JArray).Count; BuyLimit = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  BuyLimit[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("FishFailRevive"); int _n0 = (__json0 as JArray).Count; FishFailRevive = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  FishFailRevive[__index0++] = __v0; }   }
        ReviveStrenth = (int)_obj.GetValue("ReviveStrenth");
        { var __json0 = _obj.GetValue("FishUp"); int _n0 = (__json0 as JArray).Count; FishUp = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  FishUp[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("FishUseMulti"); int _n0 = (__json0 as JArray).Count; FishUseMulti = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  FishUseMulti[__index0++] = __v0; }   }
        DistanceDefault = (int)_obj.GetValue("DistanceDefault");
        DistanceFail = (int)_obj.GetValue("DistanceFail");
        Point = (int)_obj.GetValue("Point");
        DefaultFishBait = (int)_obj.GetValue("DefaultFishBait");
        { var __json0 = _obj.GetValue("GalleryReward"); int _n0 = (__json0 as JArray).Count; GalleryReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  GalleryReward[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("MailItems"); int _n0 = (__json0 as JArray).Count; MailItems = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  MailItems[__index0++] = __v0; }   }
        MailItemsId = (string)_obj.GetValue("MailItemsId");
        MailRankId = (string)_obj.GetValue("MailRankId");
        { var __json0 = _obj.GetValue("ClearTime"); int _n0 = (__json0 as JArray).Count; ClearTime = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  ClearTime[__index0++] = __v0; }   }
        ConnectActivityId = (int)_obj.GetValue("ConnectActivityId");
        RankNum = (int)_obj.GetValue("RankNum");
        ExchangeGroup = (int)_obj.GetValue("ExchangeGroup");
    }

    public static EventFishing_fishingBase DeserializeEventFishing_fishingBase(JToken _buf)
    {
        return new EventFishing_fishingBase(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 鱼饵道具
    /// </summary>
    public readonly int FishBaitItem;
    /// <summary>
    /// 钓鱼积分道具
    /// </summary>
    public readonly int FishPointItem;
    /// <summary>
    /// 断了的线道具
    /// </summary>
    public readonly int FishLineItem;
    /// <summary>
    /// 鱼王精华道具
    /// </summary>
    public readonly int FishKingItem;
    /// <summary>
    /// 礼包组
    /// </summary>
    public readonly int PackGroup;
    /// <summary>
    /// 鱼饵售价，钻石
    /// </summary>
    public readonly int FishBaitPrice;
    /// <summary>
    /// 最多用宝石购买多少鱼饵
    /// </summary>
    public readonly int LimitTimes;
    /// <summary>
    /// 根据钻石余量设定单次购买抽奖券上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit;
    /// <summary>
    /// 失败后复活所需钻石<br/>第几次复活，复活所需钻石数量
    /// </summary>
    public readonly string[] FishFailRevive;
    /// <summary>
    /// 复活增加力量
    /// </summary>
    public readonly int ReviveStrenth;
    /// <summary>
    /// 抛竿时，力度良好和力度完美，增加的稀有鱼概率
    /// </summary>
    public readonly int[] FishUp;
    /// <summary>
    /// 可使用多个鱼饵<br/>鱼饵最小值,鱼饵最大值,最多可一次使用的鱼饵数量|
    /// </summary>
    public readonly string[] FishUseMulti;
    /// <summary>
    /// 鱼的初始距离
    /// </summary>
    public readonly int DistanceDefault;
    /// <summary>
    /// 鱼的失败距离
    /// </summary>
    public readonly int DistanceFail;
    /// <summary>
    /// 积分兑重量比例
    /// </summary>
    public readonly int Point;
    /// <summary>
    /// 初始赠送鱼饵个数
    /// </summary>
    public readonly int DefaultFishBait;
    /// <summary>
    /// 图鉴解锁奖励
    /// </summary>
    public readonly string[] GalleryReward;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] MailItems;
    /// <summary>
    /// 道具转为金币邮件模板ID<br/>测试服,正式服一致
    /// </summary>
    public readonly string MailItemsId;
    /// <summary>
    /// 排行榜邮件ID<br/>测试服,正式服一致
    /// </summary>
    public readonly string MailRankId;
    /// <summary>
    /// 排行榜重组时间点<br/>距离活动开启时间过去X秒
    /// </summary>
    public readonly int[] ClearTime;
    /// <summary>
    /// 关联的活动ID<br/>EventOpenTime表ID<br/>必须唯一
    /// </summary>
    public readonly int ConnectActivityId;
    /// <summary>
    /// 排行榜单组人数
    /// </summary>
    public readonly int RankNum;
    /// <summary>
    /// 兑换组
    /// </summary>
    public readonly int ExchangeGroup;


    public const int __ID__ = -831850132;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "FishBaitItem:" + FishBaitItem + ","
        + "FishPointItem:" + FishPointItem + ","
        + "FishLineItem:" + FishLineItem + ","
        + "FishKingItem:" + FishKingItem + ","
        + "PackGroup:" + PackGroup + ","
        + "FishBaitPrice:" + FishBaitPrice + ","
        + "LimitTimes:" + LimitTimes + ","
        + "BuyLimit:" + Luban.StringUtil.CollectionToString(BuyLimit) + ","
        + "FishFailRevive:" + Luban.StringUtil.CollectionToString(FishFailRevive) + ","
        + "ReviveStrenth:" + ReviveStrenth + ","
        + "FishUp:" + Luban.StringUtil.CollectionToString(FishUp) + ","
        + "FishUseMulti:" + Luban.StringUtil.CollectionToString(FishUseMulti) + ","
        + "DistanceDefault:" + DistanceDefault + ","
        + "DistanceFail:" + DistanceFail + ","
        + "Point:" + Point + ","
        + "DefaultFishBait:" + DefaultFishBait + ","
        + "GalleryReward:" + Luban.StringUtil.CollectionToString(GalleryReward) + ","
        + "MailItems:" + Luban.StringUtil.CollectionToString(MailItems) + ","
        + "MailItemsId:" + MailItemsId + ","
        + "MailRankId:" + MailRankId + ","
        + "ClearTime:" + Luban.StringUtil.CollectionToString(ClearTime) + ","
        + "ConnectActivityId:" + ConnectActivityId + ","
        + "RankNum:" + RankNum + ","
        + "ExchangeGroup:" + ExchangeGroup + ","
        + "}";
    }
}
}

