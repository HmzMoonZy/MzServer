
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class ActivityWheel_WheelBase : Luban.BeanBase
{
    public ActivityWheel_WheelBase(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        ThemeId = (int)_obj.GetValue("ThemeId");
        openTime = (int)_obj.GetValue("openTime");
        endTime = (int)_obj.GetValue("endTime");
        OpenDateTime = (string)_obj.GetValue("OpenDateTime");
        EndDateTime = (string)_obj.GetValue("EndDateTime");
        dateTimeLimit = (int)_obj.GetValue("dateTimeLimit");
        { var __json0 = _obj.GetValue("poolTimes"); int _n0 = (__json0 as JArray).Count; poolTimes = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  poolTimes[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("rateShow"); int _n0 = (__json0 as JArray).Count; rateShow = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  rateShow[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("pool"); int _n0 = (__json0 as JArray).Count; pool = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  pool[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("poolGroundTypes"); int _n0 = (__json0 as JArray).Count; poolGroundTypes = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  poolGroundTypes[__index0++] = __v0; }   }
        bigIndex = (int)_obj.GetValue("bigIndex");
        luckyMax = (int)_obj.GetValue("luckyMax");
        priceId = (int)_obj.GetValue("priceId");
        singlePrice = (int)_obj.GetValue("singlePrice");
        tenPrice = (int)_obj.GetValue("tenPrice");
        offsetAngle = (float)_obj.GetValue("offsetAngle");
        rewardGroup = (int)_obj.GetValue("rewardGroup");
        shopGroup = (int)_obj.GetValue("shopGroup");
        giftGroup = (int)_obj.GetValue("giftGroup");
        { var __json0 = _obj.GetValue("ShopRes"); int _n0 = (__json0 as JArray).Count; ShopRes = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  ShopRes[__index0++] = __v0; }   }
        ProdMailTempId = (string)_obj.GetValue("ProdMailTempId");
        TestMailTempId = (string)_obj.GetValue("TestMailTempId");
        HelperDescId = (string)_obj.GetValue("HelperDescId");
    }

    public static ActivityWheel_WheelBase DeserializeActivityWheel_WheelBase(JToken _buf)
    {
        return new ActivityWheel_WheelBase(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 主题ID
    /// </summary>
    public readonly int ThemeId;
    /// <summary>
    /// 开启时间<br/>开服时间+X<br/>开启为本日0点
    /// </summary>
    public readonly int openTime;
    /// <summary>
    /// 结束时间<br/>开服时间+X<br/>结束为本日23点59分
    /// </summary>
    public readonly int endTime;
    /// <summary>
    /// 开启时间<br/>绝对时间
    /// </summary>
    public readonly string OpenDateTime;
    /// <summary>
    /// 结束时间<br/>绝对时间
    /// </summary>
    public readonly string EndDateTime;
    /// <summary>
    /// 绝对时间活动<br/>开服+X天后有效
    /// </summary>
    public readonly int dateTimeLimit;
    /// <summary>
    /// 幸运值多少次切换池子
    /// </summary>
    public readonly string[] poolTimes;
    /// <summary>
    /// 概率展示
    /// </summary>
    public readonly string[] rateShow;
    /// <summary>
    /// 池子
    /// </summary>
    public readonly string[] pool;
    /// <summary>
    /// 池子中各道具底图类型：<br/>0：普通<br/>1：小奖<br/>2：大奖
    /// </summary>
    public readonly int[] poolGroundTypes;
    /// <summary>
    /// 幸运大奖<br/>索引，从0开始
    /// </summary>
    public readonly int bigIndex;
    /// <summary>
    /// 幸运最大值，达到必得大奖并清零
    /// </summary>
    public readonly int luckyMax;
    /// <summary>
    /// 消耗物品Id
    /// </summary>
    public readonly int priceId;
    /// <summary>
    /// 单抽消耗<br/>物品数量
    /// </summary>
    public readonly int singlePrice;
    /// <summary>
    /// 十连消耗<br/>物品数量
    /// </summary>
    public readonly int tenPrice;
    /// <summary>
    /// 转盘旋转偏移角度，<br/>大于0为逆时针旋转，<br/>小于0为顺时针旋转
    /// </summary>
    public readonly float offsetAngle;
    /// <summary>
    /// 抽奖次数奖励组
    /// </summary>
    public readonly int rewardGroup;
    /// <summary>
    /// 商店组
    /// </summary>
    public readonly int shopGroup;
    /// <summary>
    /// 礼包组
    /// </summary>
    public readonly int giftGroup;
    /// <summary>
    /// 商店组上展示的道具id列表
    /// </summary>
    public readonly int[] ShopRes;
    /// <summary>
    /// 正式服奖励邮件<br/>进度奖励补发
    /// </summary>
    public readonly string ProdMailTempId;
    /// <summary>
    /// 测试服奖励邮件<br/>进度奖励补发
    /// </summary>
    public readonly string TestMailTempId;
    /// <summary>
    /// 玩法说明描述语言Id
    /// </summary>
    public readonly string HelperDescId;


    public const int __ID__ = 947121561;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "ThemeId:" + ThemeId + ","
        + "openTime:" + openTime + ","
        + "endTime:" + endTime + ","
        + "OpenDateTime:" + OpenDateTime + ","
        + "EndDateTime:" + EndDateTime + ","
        + "dateTimeLimit:" + dateTimeLimit + ","
        + "poolTimes:" + Luban.StringUtil.CollectionToString(poolTimes) + ","
        + "rateShow:" + Luban.StringUtil.CollectionToString(rateShow) + ","
        + "pool:" + Luban.StringUtil.CollectionToString(pool) + ","
        + "poolGroundTypes:" + Luban.StringUtil.CollectionToString(poolGroundTypes) + ","
        + "bigIndex:" + bigIndex + ","
        + "luckyMax:" + luckyMax + ","
        + "priceId:" + priceId + ","
        + "singlePrice:" + singlePrice + ","
        + "tenPrice:" + tenPrice + ","
        + "offsetAngle:" + offsetAngle + ","
        + "rewardGroup:" + rewardGroup + ","
        + "shopGroup:" + shopGroup + ","
        + "giftGroup:" + giftGroup + ","
        + "ShopRes:" + Luban.StringUtil.CollectionToString(ShopRes) + ","
        + "ProdMailTempId:" + ProdMailTempId + ","
        + "TestMailTempId:" + TestMailTempId + ","
        + "HelperDescId:" + HelperDescId + ","
        + "}";
    }
}
}

