
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class TowerChallenge_TowerLevel : Luban.BeanBase
{
    public TowerChallenge_TowerLevel(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        layer = (int)_obj.GetValue("layer");
        mapID = (int)_obj.GetValue("mapID");
        levelScriptableID = (int)_obj.GetValue("levelScriptableID");
        { var __json0 = _obj.GetValue("reward"); int _n0 = (__json0 as JArray).Count; reward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  reward[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("reparationReward"); int _n0 = (__json0 as JArray).Count; reparationReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  reparationReward[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("MemberData"); int _n0 = (__json0 as JArray).Count; MemberData = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  MemberData[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("MonsterMountIds"); int _n0 = (__json0 as JArray).Count; MonsterMountIds = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  MonsterMountIds[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("BuffData"); int _n0 = (__json0 as JArray).Count; BuffData = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  BuffData[__index0++] = __v0; }   }
        baseSpeed = (int)_obj.GetValue("baseSpeed");
        speedAdd = (int)_obj.GetValue("speedAdd");
    }

    public static TowerChallenge_TowerLevel DeserializeTowerChallenge_TowerLevel(JToken _buf)
    {
        return new TowerChallenge_TowerLevel(_buf);
    }

    /// <summary>
    /// 层数
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 索引
    /// </summary>
    public readonly int layer;
    /// <summary>
    /// 地图ID
    /// </summary>
    public readonly int mapID;
    /// <summary>
    /// 关卡数据ID
    /// </summary>
    public readonly int levelScriptableID;
    /// <summary>
    /// 奖励
    /// </summary>
    public readonly string[] reward;
    /// <summary>
    /// 补偿奖励
    /// </summary>
    public readonly string[] reparationReward;
    /// <summary>
    /// 怪物信息<br/>id,level,power,坐骑|...
    /// </summary>
    public readonly string[] MemberData;
    /// <summary>
    /// 怪物坐骑
    /// </summary>
    public readonly string[] MonsterMountIds;
    /// <summary>
    /// 怪物信息<br/>攻击增益|防御增益|生命值增益
    /// </summary>
    public readonly string[] BuffData;
    /// <summary>
    /// 基础速度
    /// </summary>
    public readonly int baseSpeed;
    /// <summary>
    /// 速度加成(万分比)
    /// </summary>
    public readonly int speedAdd;


    public const int __ID__ = -868710400;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "layer:" + layer + ","
        + "mapID:" + mapID + ","
        + "levelScriptableID:" + levelScriptableID + ","
        + "reward:" + Luban.StringUtil.CollectionToString(reward) + ","
        + "reparationReward:" + Luban.StringUtil.CollectionToString(reparationReward) + ","
        + "MemberData:" + Luban.StringUtil.CollectionToString(MemberData) + ","
        + "MonsterMountIds:" + Luban.StringUtil.CollectionToString(MonsterMountIds) + ","
        + "BuffData:" + Luban.StringUtil.CollectionToString(BuffData) + ","
        + "baseSpeed:" + baseSpeed + ","
        + "speedAdd:" + speedAdd + ","
        + "}";
    }
}
}

