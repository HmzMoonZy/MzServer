
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class Chapter_chapter : Luban.BeanBase
{
    public Chapter_chapter(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        nameId = _buf.ReadString();
        dropBase = _buf.ReadFloat();
        totalStage = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);difficultStage = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); difficultStage[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);startEvent = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); startEvent[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);eventQueue = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); eventQueue[__index0] = __e0;}}
        journeyStage = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);journey = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); journey[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);normalEvent = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); normalEvent[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);monsterGroup = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); monsterGroup[__index0] = __e0;}}
        attributes = _buf.ReadString();
        normalBattleAttr = _buf.ReadString();
        eliteBattleAttr = _buf.ReadString();
        bossBattleAttr = _buf.ReadString();
        npcBattleAttr = _buf.ReadString();
        mapId = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);rewardStage = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); rewardStage[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);staminaReturn = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); staminaReturn[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);dropID = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); dropID[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);boxBuild = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); boxBuild[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);bgm = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); bgm[__index0] = __e0;}}
        ride = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);cost = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); cost[__index0] = __e0;}}
        battleMaxDropGold = _buf.ReadInt();
        battleAttributeArea = _buf.ReadInt();
        battleSkillArea = _buf.ReadInt();
        goldDrop = _buf.ReadInt();
        gemDrop = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);packageDrop = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); packageDrop[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);bigBonus = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); bigBonus[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);smallBonus = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); smallBonus[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);itemDrop = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); itemDrop[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);battleGoldDrop = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); battleGoldDrop[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);journeyGoldDrop = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); journeyGoldDrop[__index0] = __e0;}}
        unlockType = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);unlock = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); unlock[__index0] = __e0;}}
        legacyTip = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);star = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); star[__index0] = __e0;}}
        jumpPower = _buf.ReadLong();
        jumpPowerV1_5_8 = _buf.ReadLong();
        chapterType = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);loopChapterQueue = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); loopChapterQueue[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);loopChapterFinal = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); loopChapterFinal[__index0] = __e0;}}
        stageUpgradeGroup = _buf.ReadInt();
        speedAdd = _buf.ReadInt();
    }

    public static Chapter_chapter DeserializeChapter_chapter(ByteBuf _buf)
    {
        return new Chapter_chapter(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 章节名ID
    /// </summary>
    public readonly string nameId;
    /// <summary>
    /// 掉落基数
    /// </summary>
    public readonly float dropBase;
    /// <summary>
    /// 最大层数
    /// </summary>
    public readonly int totalStage;
    /// <summary>
    /// 难度层数<br/>难度1|难度2|...
    /// </summary>
    public readonly int[] difficultStage;
    /// <summary>
    /// 章节开始特殊事件<br/>首次进入事件|首次进入事件（带技能）|n层独立事件数量|前n层坏事件库|前n层好事件库
    /// </summary>
    public readonly int[] startEvent;
    /// <summary>
    /// 事件队列<br/>ps：这里的层数为真实层数，比如6就是第六天<br/>最小层数,最大层数,事件类型,数量|......
    /// </summary>
    public readonly string[] eventQueue;
    /// <summary>
    /// 游历天数
    /// </summary>
    public readonly int journeyStage;
    /// <summary>
    /// 事件队列<br/>ps：这里的层数为真实层数，比如6就是第六天<br/>最小层数,最大层数,事件类型,数量|......
    /// </summary>
    public readonly string[] journey;
    /// <summary>
    /// 一般事件库<br/>非选择型|选择型
    /// </summary>
    public readonly int[] normalEvent;
    /// <summary>
    /// 怪物构筑表group<br/>普通|精英|boss
    /// </summary>
    public readonly int[] monsterGroup;
    /// <summary>
    /// 章节的属性加成<br/>与后续加成乘法叠加
    /// </summary>
    public readonly string attributes;
    /// <summary>
    /// 普通三围战斗属性加成
    /// </summary>
    public readonly string normalBattleAttr;
    /// <summary>
    /// 精英三围战斗属性加成
    /// </summary>
    public readonly string eliteBattleAttr;
    /// <summary>
    /// boss三围战属性加成
    /// </summary>
    public readonly string bossBattleAttr;
    /// <summary>
    /// npc三围战斗属性加成
    /// </summary>
    public readonly string npcBattleAttr;
    /// <summary>
    /// 地图
    /// </summary>
    public readonly int mapId;
    /// <summary>
    /// 层数奖励
    /// </summary>
    public readonly int[] rewardStage;
    /// <summary>
    /// 体力返还
    /// </summary>
    public readonly int[] staminaReturn;
    /// <summary>
    /// 奖励（对应奖励表）
    /// </summary>
    public readonly int[] dropID;
    /// <summary>
    /// 宝箱掉落<br/>宝箱id,权重,金币|宝箱id,权重,金币
    /// </summary>
    public readonly string[] boxBuild;
    /// <summary>
    /// 章节bgm<br/>非战斗|战斗|Boss
    /// </summary>
    public readonly int[] bgm;
    /// <summary>
    /// 主角载具
    /// </summary>
    public readonly int ride;
    /// <summary>
    /// 消耗体力<br/>货币id|数量
    /// </summary>
    public readonly int[] cost;
    /// <summary>
    /// 战斗金币最大掉落<br/>(服务器校验用）
    /// </summary>
    public readonly int battleMaxDropGold;
    /// <summary>
    /// 技能获取到的战斗属性最大倍率<br/>(服务器校验用）
    /// </summary>
    public readonly int battleAttributeArea;
    /// <summary>
    /// 战斗技能最大数量<br/>(服务器校验用）
    /// </summary>
    public readonly int battleSkillArea;
    /// <summary>
    /// 挂机金币/分钟
    /// </summary>
    public readonly int goldDrop;
    /// <summary>
    /// 挂机钻石/小时
    /// </summary>
    public readonly int gemDrop;
    /// <summary>
    /// 道具DropId|固定掉落间隔(min)
    /// </summary>
    public readonly string[] packageDrop;
    /// <summary>
    /// 几个大吉触发bonus小游戏<br/>0为不触发<br/>大吉数量|免费转动次数
    /// </summary>
    public readonly int[] bigBonus;
    /// <summary>
    /// 几个小吉触发转盘游戏<br/>0为不触发<br/>小吉数量|转盘id
    /// </summary>
    public readonly int[] smallBonus;
    /// <summary>
    /// 战斗掉落道具(itemDrop表id）<br/>普通战斗|精英战斗|boss战斗
    /// </summary>
    public readonly int[] itemDrop;
    /// <summary>
    /// 推关时战斗掉落金币<br/>普通战斗|精英战斗|boss战斗
    /// </summary>
    public readonly string[] battleGoldDrop;
    /// <summary>
    /// 游历时战斗掉落金币<br/>普通战斗|精英战斗|boss战斗
    /// </summary>
    public readonly string[] journeyGoldDrop;
    /// <summary>
    /// 解锁条件类型<br/>0：无限制<br/>1：天赋等级<br/>2：传承
    /// </summary>
    public readonly int unlockType;
    /// <summary>
    /// 解锁条件<br/>0：无条件<br/>1：天赋等级<br/>2：传承数组
    /// </summary>
    public readonly int[] unlock;
    /// <summary>
    /// 传承解锁描述Id
    /// </summary>
    public readonly string legacyTip;
    /// <summary>
    /// 星级挑战<br/>挑战类型,参数|..
    /// </summary>
    public readonly string[] star;
    /// <summary>
    /// 星级挑战跳过所需战力<br/>(-1不能跳过)
    /// </summary>
    public readonly long jumpPower;
    /// <summary>
    /// 星级挑战跳过所需战力<br/>(-1不能跳过)
    /// </summary>
    public readonly long jumpPowerV1_5_8;
    /// <summary>
    /// 章节类型<br/>0：主线章节<br/>1：日常挑战章节
    /// </summary>
    public readonly int chapterType;
    /// <summary>
    /// 循环章节队列<br/>loopChapter表id
    /// </summary>
    public readonly int[] loopChapterQueue;
    /// <summary>
    /// 循环章节队列后无限循环<br/>loopChapter表id
    /// </summary>
    public readonly int[] loopChapterFinal;
    /// <summary>
    /// 阶段组
    /// </summary>
    public readonly int stageUpgradeGroup;
    /// <summary>
    /// 速度加成(万分比)
    /// </summary>
    public readonly int speedAdd;
   
    public const int __ID__ = -1684751813;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nameId:" + nameId + ","
        + "dropBase:" + dropBase + ","
        + "totalStage:" + totalStage + ","
        + "difficultStage:" + Luban.StringUtil.CollectionToString(difficultStage) + ","
        + "startEvent:" + Luban.StringUtil.CollectionToString(startEvent) + ","
        + "eventQueue:" + Luban.StringUtil.CollectionToString(eventQueue) + ","
        + "journeyStage:" + journeyStage + ","
        + "journey:" + Luban.StringUtil.CollectionToString(journey) + ","
        + "normalEvent:" + Luban.StringUtil.CollectionToString(normalEvent) + ","
        + "monsterGroup:" + Luban.StringUtil.CollectionToString(monsterGroup) + ","
        + "attributes:" + attributes + ","
        + "normalBattleAttr:" + normalBattleAttr + ","
        + "eliteBattleAttr:" + eliteBattleAttr + ","
        + "bossBattleAttr:" + bossBattleAttr + ","
        + "npcBattleAttr:" + npcBattleAttr + ","
        + "mapId:" + mapId + ","
        + "rewardStage:" + Luban.StringUtil.CollectionToString(rewardStage) + ","
        + "staminaReturn:" + Luban.StringUtil.CollectionToString(staminaReturn) + ","
        + "dropID:" + Luban.StringUtil.CollectionToString(dropID) + ","
        + "boxBuild:" + Luban.StringUtil.CollectionToString(boxBuild) + ","
        + "bgm:" + Luban.StringUtil.CollectionToString(bgm) + ","
        + "ride:" + ride + ","
        + "cost:" + Luban.StringUtil.CollectionToString(cost) + ","
        + "battleMaxDropGold:" + battleMaxDropGold + ","
        + "battleAttributeArea:" + battleAttributeArea + ","
        + "battleSkillArea:" + battleSkillArea + ","
        + "goldDrop:" + goldDrop + ","
        + "gemDrop:" + gemDrop + ","
        + "packageDrop:" + Luban.StringUtil.CollectionToString(packageDrop) + ","
        + "bigBonus:" + Luban.StringUtil.CollectionToString(bigBonus) + ","
        + "smallBonus:" + Luban.StringUtil.CollectionToString(smallBonus) + ","
        + "itemDrop:" + Luban.StringUtil.CollectionToString(itemDrop) + ","
        + "battleGoldDrop:" + Luban.StringUtil.CollectionToString(battleGoldDrop) + ","
        + "journeyGoldDrop:" + Luban.StringUtil.CollectionToString(journeyGoldDrop) + ","
        + "unlockType:" + unlockType + ","
        + "unlock:" + Luban.StringUtil.CollectionToString(unlock) + ","
        + "legacyTip:" + legacyTip + ","
        + "star:" + Luban.StringUtil.CollectionToString(star) + ","
        + "jumpPower:" + jumpPower + ","
        + "jumpPowerV1_5_8:" + jumpPowerV1_5_8 + ","
        + "chapterType:" + chapterType + ","
        + "loopChapterQueue:" + Luban.StringUtil.CollectionToString(loopChapterQueue) + ","
        + "loopChapterFinal:" + Luban.StringUtil.CollectionToString(loopChapterFinal) + ","
        + "stageUpgradeGroup:" + stageUpgradeGroup + ","
        + "speedAdd:" + speedAdd + ","
        + "}";
    }
}

}

