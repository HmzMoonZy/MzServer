
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class MythicDungeon_levelEvent : Luban.BeanBase
{
    public MythicDungeon_levelEvent(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        quality = (int)_obj.GetValue("quality");
        nameId = (string)_obj.GetValue("nameId");
        atlasId = (int)_obj.GetValue("atlasId");
        icon = (string)_obj.GetValue("icon");
        bossAtlasId = (int)_obj.GetValue("bossAtlasId");
        bossIcon = (string)_obj.GetValue("bossIcon");
        levelType = (int)_obj.GetValue("levelType");
        type = (int)_obj.GetValue("type");
        eventPoint = (int)_obj.GetValue("eventPoint");
        weight = (int)_obj.GetValue("weight");
        normalDropRate = (int)_obj.GetValue("normalDropRate");
        unlockLevel = (int)_obj.GetValue("unlockLevel");
        wave = (int)_obj.GetValue("wave");
        { var __json0 = _obj.GetValue("monsterCfgGroup"); int _n0 = (__json0 as JArray).Count; monsterCfgGroup = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  monsterCfgGroup[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("bossCfg"); int _n0 = (__json0 as JArray).Count; bossCfg = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  bossCfg[__index0++] = __v0; }   }
        roundLimit = (int)_obj.GetValue("roundLimit");
        mapId = (int)_obj.GetValue("mapId");
        { var __json0 = _obj.GetValue("bgm"); int _n0 = (__json0 as JArray).Count; bgm = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  bgm[__index0++] = __v0; }   }
    }

    public static MythicDungeon_levelEvent DeserializeMythicDungeon_levelEvent(JToken _buf)
    {
        return new MythicDungeon_levelEvent(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 品质<br/>1-白2-绿3-蓝4-紫5-橙6-红7-粉
    /// </summary>
    public readonly int quality;
    /// <summary>
    /// 名称多语言
    /// </summary>
    public readonly string nameId;
    /// <summary>
    /// 关卡缩略图图集
    /// </summary>
    public readonly int atlasId;
    /// <summary>
    /// 关卡缩略图icon
    /// </summary>
    public readonly string icon;
    /// <summary>
    /// boss缩略图图集
    /// </summary>
    public readonly int bossAtlasId;
    /// <summary>
    /// bossIcon
    /// </summary>
    public readonly string bossIcon;
    /// <summary>
    /// 池ID<br/>0-无<br/>1-大吉2-中吉3-小吉4-运气不佳
    /// </summary>
    public readonly int levelType;
    /// <summary>
    /// 类型<br/>1-怪物2-诅咒宝箱3-天使4-恶魔5-最终BOSS
    /// </summary>
    public readonly int type;
    /// <summary>
    /// 事件点id
    /// </summary>
    public readonly int eventPoint;
    /// <summary>
    /// 权重
    /// </summary>
    public readonly int weight;
    /// <summary>
    /// 普通怪物掉落概率<br/>（万分比）
    /// </summary>
    public readonly int normalDropRate;
    /// <summary>
    /// 解锁层数<br/>&gt;=该层时解锁
    /// </summary>
    public readonly int unlockLevel;
    /// <summary>
    /// 战斗波次
    /// </summary>
    public readonly int wave;
    /// <summary>
    /// 怪物对阵池<br/>不去重随机
    /// </summary>
    public readonly int[] monsterCfgGroup;
    /// <summary>
    /// 最终BOSS对阵
    /// </summary>
    public readonly int[] bossCfg;
    /// <summary>
    /// 回合数限制
    /// </summary>
    public readonly int roundLimit;
    /// <summary>
    /// 地图
    /// </summary>
    public readonly int mapId;
    /// <summary>
    /// 章节bgm<br/>非战斗|战斗|Boss
    /// </summary>
    public readonly int[] bgm;


    public const int __ID__ = -995080171;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "quality:" + quality + ","
        + "nameId:" + nameId + ","
        + "atlasId:" + atlasId + ","
        + "icon:" + icon + ","
        + "bossAtlasId:" + bossAtlasId + ","
        + "bossIcon:" + bossIcon + ","
        + "levelType:" + levelType + ","
        + "type:" + type + ","
        + "eventPoint:" + eventPoint + ","
        + "weight:" + weight + ","
        + "normalDropRate:" + normalDropRate + ","
        + "unlockLevel:" + unlockLevel + ","
        + "wave:" + wave + ","
        + "monsterCfgGroup:" + Luban.StringUtil.CollectionToString(monsterCfgGroup) + ","
        + "bossCfg:" + Luban.StringUtil.CollectionToString(bossCfg) + ","
        + "roundLimit:" + roundLimit + ","
        + "mapId:" + mapId + ","
        + "bgm:" + Luban.StringUtil.CollectionToString(bgm) + ","
        + "}";
    }
}
}

