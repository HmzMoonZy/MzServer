
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class Map_map : Luban.BeanBase
{
    public Map_map(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        mapType = (int)_obj.GetValue("mapType");
        bottomType = (int)_obj.GetValue("bottomType");
        bottomPointName = (string)_obj.GetValue("bottomPointName");
        nameId = (string)_obj.GetValue("nameId");
        bossArtMap = (int)_obj.GetValue("bossArtMap");
        { var __json0 = _obj.GetValue("playerOffset"); int _n0 = (__json0 as JArray).Count; playerOffset = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  playerOffset[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("petOffset"); int _n0 = (__json0 as JArray).Count; petOffset = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  petOffset[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("skyIDs"); int _n0 = (__json0 as JArray).Count; skyIDs = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  skyIDs[__index0++] = __v0; }   }
        skyOffsetY = (float)_obj.GetValue("skyOffsetY");
        { var __json0 = _obj.GetValue("bgIds"); int _n0 = (__json0 as JArray).Count; bgIds = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  bgIds[__index0++] = __v0; }   }
        bgOffsetY = (float)_obj.GetValue("bgOffsetY");
        { var __json0 = _obj.GetValue("bgSpeed"); int _n0 = (__json0 as JArray).Count; bgSpeed = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  bgSpeed[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("farIDs"); int _n0 = (__json0 as JArray).Count; farIDs = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  farIDs[__index0++] = __v0; }   }
        farOffsetY = (float)_obj.GetValue("farOffsetY");
        { var __json0 = _obj.GetValue("farSpeed"); int _n0 = (__json0 as JArray).Count; farSpeed = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  farSpeed[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("middleIDs"); int _n0 = (__json0 as JArray).Count; middleIDs = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  middleIDs[__index0++] = __v0; }   }
        middleOffsetY = (float)_obj.GetValue("middleOffsetY");
        { var __json0 = _obj.GetValue("nearIDs"); int _n0 = (__json0 as JArray).Count; nearIDs = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  nearIDs[__index0++] = __v0; }   }
        nearOffsetY = (float)_obj.GetValue("nearOffsetY");
        waveOffsetY = (float)_obj.GetValue("waveOffsetY");
        { var __json0 = _obj.GetValue("normalWaves"); int _n0 = (__json0 as JArray).Count; normalWaves = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  normalWaves[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("specialWaves"); int _n0 = (__json0 as JArray).Count; specialWaves = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  specialWaves[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("clouds"); int _n0 = (__json0 as JArray).Count; clouds = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  clouds[__index0++] = __v0; }   }
        cloudOffsetY = (float)_obj.GetValue("cloudOffsetY");
        { var __json0 = _obj.GetValue("cloudSpeed"); int _n0 = (__json0 as JArray).Count; cloudSpeed = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  cloudSpeed[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("farFloating"); int _n0 = (__json0 as JArray).Count; farFloating = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  farFloating[__index0++] = __v0; }   }
        farFloatingOffsetY = (float)_obj.GetValue("farFloatingOffsetY");
        { var __json0 = _obj.GetValue("farFloatingSpeed"); int _n0 = (__json0 as JArray).Count; farFloatingSpeed = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  farFloatingSpeed[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("farStatic"); int _n0 = (__json0 as JArray).Count; farStatic = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  farStatic[__index0++] = __v0; }   }
        farStaticOffsetY = (float)_obj.GetValue("farStaticOffsetY");
        { var __json0 = _obj.GetValue("middleFloating"); int _n0 = (__json0 as JArray).Count; middleFloating = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  middleFloating[__index0++] = __v0; }   }
        middleFloatingOffsetY = (float)_obj.GetValue("middleFloatingOffsetY");
        { var __json0 = _obj.GetValue("nearFloating"); int _n0 = (__json0 as JArray).Count; nearFloating = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  nearFloating[__index0++] = __v0; }   }
        nearFloatingOffsetY = (float)_obj.GetValue("nearFloatingOffsetY");
        { var __json0 = _obj.GetValue("nearFloatingSpeed"); int _n0 = (__json0 as JArray).Count; nearFloatingSpeed = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  nearFloatingSpeed[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("floatingRandom"); int _n0 = (__json0 as JArray).Count; floatingRandom = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  floatingRandom[__index0++] = __v0; }   }
        isPlanet = (int)_obj.GetValue("isPlanet");
        { var __json0 = _obj.GetValue("planetOffset"); int _n0 = (__json0 as JArray).Count; planetOffset = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  planetOffset[__index0++] = __v0; }   }
        hangupOffsetY = (float)_obj.GetValue("hangupOffsetY");
        hangupPlayerY = (float)_obj.GetValue("hangupPlayerY");
        { var __json0 = _obj.GetValue("memberColor"); int _n0 = (__json0 as JArray).Count; memberColor = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  memberColor[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("spriteColor"); int _n0 = (__json0 as JArray).Count; spriteColor = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  spriteColor[__index0++] = __v0; }   }
        changeTime = (int)_obj.GetValue("changeTime");
        matPrefix = (string)_obj.GetValue("matPrefix");
        activityMap = (int)_obj.GetValue("activityMap");
        activityLightColor = (string)_obj.GetValue("activityLightColor");
        activityStarColor = (string)_obj.GetValue("activityStarColor");
        activityButtonBg = (int)_obj.GetValue("activityButtonBg");
        ride = (int)_obj.GetValue("ride");
        { var __json0 = _obj.GetValue("groundTex1Ids"); int _n0 = (__json0 as JArray).Count; groundTex1Ids = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  groundTex1Ids[__index0++] = __v0; }   }
        groundTex1OffsetY = (float)_obj.GetValue("groundTex1OffsetY");
        { var __json0 = _obj.GetValue("groundTex2Ids"); int _n0 = (__json0 as JArray).Count; groundTex2Ids = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  groundTex2Ids[__index0++] = __v0; }   }
        groundTex2OffsetY = (float)_obj.GetValue("groundTex2OffsetY");
        groundTexColor = (string)_obj.GetValue("groundTexColor");
    }

    public static Map_map DeserializeMap_map(JToken _buf)
    {
        return new Map_map(_buf);
    }

    /// <summary>
    /// 内容ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 地图类型<br/>0海洋 1陆地
    /// </summary>
    public readonly int mapType;
    /// <summary>
    /// 底座类型<br/>0无 1 海洋 2 陆地
    /// </summary>
    public readonly int bottomType;
    /// <summary>
    /// 底座挂点名称
    /// </summary>
    public readonly string bottomPointName;
    /// <summary>
    /// 章节名ID
    /// </summary>
    public readonly string nameId;
    /// <summary>
    /// S1赛季Boss战特殊地图
    /// </summary>
    public readonly int bossArtMap;
    /// <summary>
    /// 玩家偏移
    /// </summary>
    public readonly float[] playerOffset;
    /// <summary>
    /// 宠物1偏移|宠物2偏移
    /// </summary>
    public readonly string[] petOffset;
    /// <summary>
    /// 天空层<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] skyIDs;
    /// <summary>
    /// 天空层Y轴偏移量
    /// </summary>
    public readonly float skyOffsetY;
    /// <summary>
    /// 背景层<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] bgIds;
    /// <summary>
    /// 背景层Y轴偏移
    /// </summary>
    public readonly float bgOffsetY;
    /// <summary>
    /// 背景速度偏移<br/>普通|加速|挂机
    /// </summary>
    public readonly float[] bgSpeed;
    /// <summary>
    /// 远景层<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] farIDs;
    /// <summary>
    /// 远景层Y轴偏移量
    /// </summary>
    public readonly float farOffsetY;
    /// <summary>
    /// 远景速度偏移<br/>普通|加速|挂机
    /// </summary>
    public readonly float[] farSpeed;
    /// <summary>
    /// 中景层<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] middleIDs;
    /// <summary>
    /// 中景层Y轴偏移量
    /// </summary>
    public readonly float middleOffsetY;
    /// <summary>
    /// 近景层<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] nearIDs;
    /// <summary>
    /// 近景层Y轴偏移量
    /// </summary>
    public readonly float nearOffsetY;
    /// <summary>
    /// 海浪Y轴偏移量
    /// </summary>
    public readonly float waveOffsetY;
    /// <summary>
    /// 默认海浪
    /// </summary>
    public readonly int[] normalWaves;
    /// <summary>
    /// 特殊海浪
    /// </summary>
    public readonly int[] specialWaves;
    /// <summary>
    /// 云彩
    /// </summary>
    public readonly int[] clouds;
    /// <summary>
    /// 云彩Y轴偏移
    /// </summary>
    public readonly float cloudOffsetY;
    /// <summary>
    /// 云彩速度偏移<br/>普通|加速|挂机
    /// </summary>
    public readonly float[] cloudSpeed;
    /// <summary>
    /// 远景漂浮物
    /// </summary>
    public readonly int[] farFloating;
    /// <summary>
    /// 远景漂浮物Y轴偏移
    /// </summary>
    public readonly float farFloatingOffsetY;
    /// <summary>
    /// 远景漂浮物速度偏移<br/>普通|加速|挂机
    /// </summary>
    public readonly float[] farFloatingSpeed;
    /// <summary>
    /// 远景静态装饰物
    /// </summary>
    public readonly int[] farStatic;
    /// <summary>
    /// 远景静态装饰物Y轴偏移
    /// </summary>
    public readonly float farStaticOffsetY;
    /// <summary>
    /// 中景漂浮物
    /// </summary>
    public readonly int[] middleFloating;
    /// <summary>
    /// 中景漂浮物Y轴偏移
    /// </summary>
    public readonly float middleFloatingOffsetY;
    /// <summary>
    /// 近景漂浮物
    /// </summary>
    public readonly int[] nearFloating;
    /// <summary>
    /// 近景漂浮物Y轴偏移
    /// </summary>
    public readonly float nearFloatingOffsetY;
    /// <summary>
    /// 近景漂浮物速度偏移<br/>普通|加速|挂机
    /// </summary>
    public readonly float[] nearFloatingSpeed;
    /// <summary>
    /// 漂浮物随机<br/>云|动态远景|中景|近景|静态远景
    /// </summary>
    public readonly int[] floatingRandom;
    /// <summary>
    /// 是否显示太阳和月亮
    /// </summary>
    public readonly int isPlanet;
    /// <summary>
    /// 星球层偏移<br/>X|Y
    /// </summary>
    public readonly float[] planetOffset;
    /// <summary>
    /// 挂机地图偏移
    /// </summary>
    public readonly float hangupOffsetY;
    /// <summary>
    /// 挂机角色偏移
    /// </summary>
    public readonly float hangupPlayerY;
    /// <summary>
    /// 角色时辰颜色变化<br/>白天|黄昏|夜晚
    /// </summary>
    public readonly float[] memberColor;
    /// <summary>
    /// 静态图时辰颜色变化<br/>白天|黄昏|夜晚
    /// </summary>
    public readonly float[] spriteColor;
    /// <summary>
    /// 是否随机时辰
    /// </summary>
    public readonly int changeTime;
    /// <summary>
    /// 材质球前缀
    /// </summary>
    public readonly string matPrefix;
    /// <summary>
    /// 章节活动背景ID
    /// </summary>
    public readonly int activityMap;
    /// <summary>
    /// 光颜色
    /// </summary>
    public readonly string activityLightColor;
    /// <summary>
    /// 星星颜色
    /// </summary>
    public readonly string activityStarColor;
    /// <summary>
    /// 章节活动按钮背景
    /// </summary>
    public readonly int activityButtonBg;
    /// <summary>
    /// 载具
    /// </summary>
    public readonly int ride;
    /// <summary>
    /// 地面纹理层1<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] groundTex1Ids;
    /// <summary>
    /// 纹理层1Y轴偏移量
    /// </summary>
    public readonly float groundTex1OffsetY;
    /// <summary>
    /// 地面纹理层2<br/>白天1,2,3|黄昏1,2,3|夜晚1,2,3
    /// </summary>
    public readonly string[] groundTex2Ids;
    /// <summary>
    /// 纹理层2Y轴偏移量
    /// </summary>
    public readonly float groundTex2OffsetY;
    /// <summary>
    /// 地面纹理层颜色<br/>16进制色值必须以#开始
    /// </summary>
    public readonly string groundTexColor;


    public const int __ID__ = -1793260583;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "mapType:" + mapType + ","
        + "bottomType:" + bottomType + ","
        + "bottomPointName:" + bottomPointName + ","
        + "nameId:" + nameId + ","
        + "bossArtMap:" + bossArtMap + ","
        + "playerOffset:" + Luban.StringUtil.CollectionToString(playerOffset) + ","
        + "petOffset:" + Luban.StringUtil.CollectionToString(petOffset) + ","
        + "skyIDs:" + Luban.StringUtil.CollectionToString(skyIDs) + ","
        + "skyOffsetY:" + skyOffsetY + ","
        + "bgIds:" + Luban.StringUtil.CollectionToString(bgIds) + ","
        + "bgOffsetY:" + bgOffsetY + ","
        + "bgSpeed:" + Luban.StringUtil.CollectionToString(bgSpeed) + ","
        + "farIDs:" + Luban.StringUtil.CollectionToString(farIDs) + ","
        + "farOffsetY:" + farOffsetY + ","
        + "farSpeed:" + Luban.StringUtil.CollectionToString(farSpeed) + ","
        + "middleIDs:" + Luban.StringUtil.CollectionToString(middleIDs) + ","
        + "middleOffsetY:" + middleOffsetY + ","
        + "nearIDs:" + Luban.StringUtil.CollectionToString(nearIDs) + ","
        + "nearOffsetY:" + nearOffsetY + ","
        + "waveOffsetY:" + waveOffsetY + ","
        + "normalWaves:" + Luban.StringUtil.CollectionToString(normalWaves) + ","
        + "specialWaves:" + Luban.StringUtil.CollectionToString(specialWaves) + ","
        + "clouds:" + Luban.StringUtil.CollectionToString(clouds) + ","
        + "cloudOffsetY:" + cloudOffsetY + ","
        + "cloudSpeed:" + Luban.StringUtil.CollectionToString(cloudSpeed) + ","
        + "farFloating:" + Luban.StringUtil.CollectionToString(farFloating) + ","
        + "farFloatingOffsetY:" + farFloatingOffsetY + ","
        + "farFloatingSpeed:" + Luban.StringUtil.CollectionToString(farFloatingSpeed) + ","
        + "farStatic:" + Luban.StringUtil.CollectionToString(farStatic) + ","
        + "farStaticOffsetY:" + farStaticOffsetY + ","
        + "middleFloating:" + Luban.StringUtil.CollectionToString(middleFloating) + ","
        + "middleFloatingOffsetY:" + middleFloatingOffsetY + ","
        + "nearFloating:" + Luban.StringUtil.CollectionToString(nearFloating) + ","
        + "nearFloatingOffsetY:" + nearFloatingOffsetY + ","
        + "nearFloatingSpeed:" + Luban.StringUtil.CollectionToString(nearFloatingSpeed) + ","
        + "floatingRandom:" + Luban.StringUtil.CollectionToString(floatingRandom) + ","
        + "isPlanet:" + isPlanet + ","
        + "planetOffset:" + Luban.StringUtil.CollectionToString(planetOffset) + ","
        + "hangupOffsetY:" + hangupOffsetY + ","
        + "hangupPlayerY:" + hangupPlayerY + ","
        + "memberColor:" + Luban.StringUtil.CollectionToString(memberColor) + ","
        + "spriteColor:" + Luban.StringUtil.CollectionToString(spriteColor) + ","
        + "changeTime:" + changeTime + ","
        + "matPrefix:" + matPrefix + ","
        + "activityMap:" + activityMap + ","
        + "activityLightColor:" + activityLightColor + ","
        + "activityStarColor:" + activityStarColor + ","
        + "activityButtonBg:" + activityButtonBg + ","
        + "ride:" + ride + ","
        + "groundTex1Ids:" + Luban.StringUtil.CollectionToString(groundTex1Ids) + ","
        + "groundTex1OffsetY:" + groundTex1OffsetY + ","
        + "groundTex2Ids:" + Luban.StringUtil.CollectionToString(groundTex2Ids) + ","
        + "groundTex2OffsetY:" + groundTex2OffsetY + ","
        + "groundTexColor:" + groundTexColor + ","
        + "}";
    }
}
}

