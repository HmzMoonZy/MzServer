
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class Shop_Summon : Luban.BeanBase
{
    public Shop_Summon(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        orderId = (int)_obj.GetValue("orderId");
        groupId = (int)_obj.GetValue("groupId");
        freeTimes = (int)_obj.GetValue("freeTimes");
        adId = (int)_obj.GetValue("adId");
        priceId = (int)_obj.GetValue("priceId");
        singlePrice = (int)_obj.GetValue("singlePrice");
        singlePriceOrigin = (int)_obj.GetValue("singlePriceOrigin");
        quickDraw = (int)_obj.GetValue("quickDraw");
        tenPrice = (int)_obj.GetValue("tenPrice");
        tenPriceOrigin = (int)_obj.GetValue("tenPriceOrigin");
        { var __json0 = _obj.GetValue("first"); int _n0 = (__json0 as JArray).Count; first = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  first[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("rateShow"); int _n0 = (__json0 as JArray).Count; rateShow = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  rateShow[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("normalRate"); int _n0 = (__json0 as JArray).Count; normalRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  normalRate[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("reverseRate"); int _n0 = (__json0 as JArray).Count; reverseRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  reverseRate[__index0++] = __v0; }   }
        reverseCount = (int)_obj.GetValue("reverseCount");
        reversePool = (int)_obj.GetValue("reversePool");
        { var __json0 = _obj.GetValue("goldGet"); int _n0 = (__json0 as JArray).Count; goldGet = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  goldGet[__index0++] = __v0; }   }
        limitTimes = (int)_obj.GetValue("limitTimes");
        miniPityCount = (int)_obj.GetValue("miniPityCount");
        { var __json0 = _obj.GetValue("miniPityRate"); int _n0 = (__json0 as JArray).Count; miniPityRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  miniPityRate[__index0++] = __v0; }   }
        miniPityPool = (int)_obj.GetValue("miniPityPool");
        hardPityCount = (int)_obj.GetValue("hardPityCount");
        { var __json0 = _obj.GetValue("hardPityRate"); int _n0 = (__json0 as JArray).Count; hardPityRate = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  hardPityRate[__index0++] = __v0; }   }
        hardPityPool = (int)_obj.GetValue("hardPityPool");
        upEquipID = (int)_obj.GetValue("upEquipID");
        boxId = (int)_obj.GetValue("boxId");
    }

    public static Shop_Summon DeserializeShop_Summon(JToken _buf)
    {
        return new Shop_Summon(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 排序Id
    /// </summary>
    public readonly int orderId;
    /// <summary>
    /// 组Id
    /// </summary>
    public readonly int groupId;
    /// <summary>
    /// 每日免费次数
    /// </summary>
    public readonly int freeTimes;
    /// <summary>
    /// 广告Id
    /// </summary>
    public readonly int adId;
    /// <summary>
    /// 消耗物品Id
    /// </summary>
    public readonly int priceId;
    /// <summary>
    /// 单抽消耗<br/>物品数量
    /// </summary>
    public readonly int singlePrice;
    /// <summary>
    /// 单抽原始价格(钻石)<br/>大于0生效
    /// </summary>
    public readonly int singlePriceOrigin;
    /// <summary>
    /// 当钥匙大于0小于10的时候，一键抽完
    /// </summary>
    public readonly int quickDraw;
    /// <summary>
    /// 十连消耗<br/>物品数量
    /// </summary>
    public readonly int tenPrice;
    /// <summary>
    /// 十连原价(钻石)<br/>大于0生效
    /// </summary>
    public readonly int tenPriceOrigin;
    /// <summary>
    /// 首抽池
    /// </summary>
    public readonly string[] first;
    /// <summary>
    /// 抽卡概率展示ID<br/>卡池,展示概率,文本,颜色|卡池,展示概率,文本,颜色
    /// </summary>
    public readonly string[] rateShow;
    /// <summary>
    /// 抽卡概率
    /// </summary>
    public readonly string[] normalRate;
    /// <summary>
    /// 低于reverseCount的次数时使用的卡池
    /// </summary>
    public readonly string[] reverseRate;
    /// <summary>
    /// 低于配置值,卡池读reverseRate
    /// </summary>
    public readonly int reverseCount;
    /// <summary>
    /// 当抽到此卡池的道具后<br/>reverseCount重新计数
    /// </summary>
    public readonly int reversePool;
    /// <summary>
    /// 每次抽取附赠道具,数量（国内版本）
    /// </summary>
    public readonly string[] goldGet;
    /// <summary>
    /// 每个宝箱限定抽卡次数（国内版本）
    /// </summary>
    public readonly int limitTimes;
    /// <summary>
    /// 小保底次数
    /// </summary>
    public readonly int miniPityCount;
    /// <summary>
    /// 小保底抽卡概率
    /// </summary>
    public readonly string[] miniPityRate;
    /// <summary>
    /// 小保底重置卡包检测
    /// </summary>
    public readonly int miniPityPool;
    /// <summary>
    /// 大保底次数
    /// </summary>
    public readonly int hardPityCount;
    /// <summary>
    /// 大保底池id
    /// </summary>
    public readonly string[] hardPityRate;
    /// <summary>
    /// 大保底重置卡包检测
    /// </summary>
    public readonly int hardPityPool;
    /// <summary>
    /// up装备id
    /// </summary>
    public readonly int upEquipID;
    /// <summary>
    /// 箱子id<br/>1-青铜宝箱<br/>2-白银宝箱<br/>3-黄金宝箱<br/>4-钻石宝箱
    /// </summary>
    public readonly int boxId;


    public const int __ID__ = 1977734730;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "orderId:" + orderId + ","
        + "groupId:" + groupId + ","
        + "freeTimes:" + freeTimes + ","
        + "adId:" + adId + ","
        + "priceId:" + priceId + ","
        + "singlePrice:" + singlePrice + ","
        + "singlePriceOrigin:" + singlePriceOrigin + ","
        + "quickDraw:" + quickDraw + ","
        + "tenPrice:" + tenPrice + ","
        + "tenPriceOrigin:" + tenPriceOrigin + ","
        + "first:" + Luban.StringUtil.CollectionToString(first) + ","
        + "rateShow:" + Luban.StringUtil.CollectionToString(rateShow) + ","
        + "normalRate:" + Luban.StringUtil.CollectionToString(normalRate) + ","
        + "reverseRate:" + Luban.StringUtil.CollectionToString(reverseRate) + ","
        + "reverseCount:" + reverseCount + ","
        + "reversePool:" + reversePool + ","
        + "goldGet:" + Luban.StringUtil.CollectionToString(goldGet) + ","
        + "limitTimes:" + limitTimes + ","
        + "miniPityCount:" + miniPityCount + ","
        + "miniPityRate:" + Luban.StringUtil.CollectionToString(miniPityRate) + ","
        + "miniPityPool:" + miniPityPool + ","
        + "hardPityCount:" + hardPityCount + ","
        + "hardPityRate:" + Luban.StringUtil.CollectionToString(hardPityRate) + ","
        + "hardPityPool:" + hardPityPool + ","
        + "upEquipID:" + upEquipID + ","
        + "boxId:" + boxId + ","
        + "}";
    }
}
}

