
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class MythicDungeon_MythicDungeon : Luban.BeanBase
{
    public MythicDungeon_MythicDungeon(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        nameId = (string)_obj.GetValue("nameId");
        { var __json0 = _obj.GetValue("desId"); int _n0 = (__json0 as JArray).Count; desId = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  desId[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("probabilitiesStr"); int _n0 = (__json0 as JArray).Count; probabilitiesStr = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  probabilitiesStr[__index0++] = __v0; }   }
        speedBoxRound = (int)_obj.GetValue("speedBoxRound");
        speedBoxDropID = (int)_obj.GetValue("speedBoxDropID");
        fightFeaturePre = (int)_obj.GetValue("fightFeaturePre");
        { var __json0 = _obj.GetValue("fightFeatureAll"); int _n0 = (__json0 as JArray).Count; fightFeatureAll = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  fightFeatureAll[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("dropPre"); int _n0 = (__json0 as JArray).Count; dropPre = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  dropPre[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("dropAll"); int _n0 = (__json0 as JArray).Count; dropAll = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  dropAll[__index0++] = __v0; }   }
        maxRound = (int)_obj.GetValue("maxRound");
        progress = (int)_obj.GetValue("progress");
        normalDropLimit = (int)_obj.GetValue("normalDropLimit");
        normalDropID = (int)_obj.GetValue("normalDropID");
        normalBossDropLimit = (int)_obj.GetValue("normalBossDropLimit");
        normalBossDropId = (int)_obj.GetValue("normalBossDropId");
        bossDropID = (int)_obj.GetValue("bossDropID");
        curseBoxDropID = (int)_obj.GetValue("curseBoxDropID");
        bossLevelEventID = (int)_obj.GetValue("bossLevelEventID");
        attributes = (string)_obj.GetValue("attributes");
        normalBattleAttr = (string)_obj.GetValue("normalBattleAttr");
        eliteBattleAttr = (string)_obj.GetValue("eliteBattleAttr");
        bossBattleAttr = (string)_obj.GetValue("bossBattleAttr");
        mapId = (int)_obj.GetValue("mapId");
        campEventPointId = (int)_obj.GetValue("campEventPointId");
        { var __json0 = _obj.GetValue("campOffset"); int _n0 = (__json0 as JArray).Count; campOffset = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  campOffset[__index0++] = __v0; }   }
        jumpPower = (long)_obj.GetValue("jumpPower");
        speedAdd = (long)_obj.GetValue("speedAdd");
    }

    public static MythicDungeon_MythicDungeon DeserializeMythicDungeon_MythicDungeon(JToken _buf)
    {
        return new MythicDungeon_MythicDungeon(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 层数名
    /// </summary>
    public readonly string nameId;
    /// <summary>
    /// 描述ID组
    /// </summary>
    public readonly string[] desId;
    /// <summary>
    /// 概论公式文本的多语言ID
    /// </summary>
    public readonly string[] probabilitiesStr;
    /// <summary>
    /// 速通宝箱回合数&lt;=
    /// </summary>
    public readonly int speedBoxRound;
    /// <summary>
    /// 速通宝箱掉落ID
    /// </summary>
    public readonly int speedBoxDropID;
    /// <summary>
    /// 战斗特性预览<br/>（显示用）
    /// </summary>
    public readonly int fightFeaturePre;
    /// <summary>
    /// 战斗特性<br/>全量
    /// </summary>
    public readonly int[] fightFeatureAll;
    /// <summary>
    /// 图集ID|图标ID|底框图集ID|底框图标|标题多语言|描述多语言
    /// </summary>
    public readonly string[] dropPre;
    /// <summary>
    /// 掉落全部预览（显示用）
    /// </summary>
    public readonly int[] dropAll;
    /// <summary>
    /// 最大战斗回合数
    /// </summary>
    public readonly int maxRound;
    /// <summary>
    /// 进度值<br/>触发最终BOSS战
    /// </summary>
    public readonly int progress;
    /// <summary>
    /// 普通怪物<br/>掉落上限
    /// </summary>
    public readonly int normalDropLimit;
    /// <summary>
    /// 普通怪物<br/>掉落ID
    /// </summary>
    public readonly int normalDropID;
    /// <summary>
    /// 精英<br/>掉落上限
    /// </summary>
    public readonly int normalBossDropLimit;
    /// <summary>
    /// 精英掉落id
    /// </summary>
    public readonly int normalBossDropId;
    /// <summary>
    /// BOSS<br/>掉落ID
    /// </summary>
    public readonly int bossDropID;
    /// <summary>
    /// 诅咒宝箱掉落
    /// </summary>
    public readonly int curseBoxDropID;
    /// <summary>
    /// 最终BOSS levelEvent ID
    /// </summary>
    public readonly int bossLevelEventID;
    /// <summary>
    /// 层数属性加成<br/>与后续加成乘法叠加
    /// </summary>
    public readonly string attributes;
    /// <summary>
    /// 普通三围战斗属性加成
    /// </summary>
    public readonly string normalBattleAttr;
    /// <summary>
    /// 精英三围战斗属性加成
    /// </summary>
    public readonly string eliteBattleAttr;
    /// <summary>
    /// boss三围战属性加成
    /// </summary>
    public readonly string bossBattleAttr;
    /// <summary>
    /// 地图
    /// </summary>
    public readonly int mapId;
    /// <summary>
    /// 营地事件点id
    /// </summary>
    public readonly int campEventPointId;
    /// <summary>
    /// 营地位置偏移<br/>x|y
    /// </summary>
    public readonly float[] campOffset;
    /// <summary>
    /// 星级挑战跳过所需战力<br/>(-1不能跳过)<br/>根本没做这功能
    /// </summary>
    public readonly long jumpPower;
    /// <summary>
    /// 速度
    /// </summary>
    public readonly long speedAdd;


    public const int __ID__ = 2131877889;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nameId:" + nameId + ","
        + "desId:" + Luban.StringUtil.CollectionToString(desId) + ","
        + "probabilitiesStr:" + Luban.StringUtil.CollectionToString(probabilitiesStr) + ","
        + "speedBoxRound:" + speedBoxRound + ","
        + "speedBoxDropID:" + speedBoxDropID + ","
        + "fightFeaturePre:" + fightFeaturePre + ","
        + "fightFeatureAll:" + Luban.StringUtil.CollectionToString(fightFeatureAll) + ","
        + "dropPre:" + Luban.StringUtil.CollectionToString(dropPre) + ","
        + "dropAll:" + Luban.StringUtil.CollectionToString(dropAll) + ","
        + "maxRound:" + maxRound + ","
        + "progress:" + progress + ","
        + "normalDropLimit:" + normalDropLimit + ","
        + "normalDropID:" + normalDropID + ","
        + "normalBossDropLimit:" + normalBossDropLimit + ","
        + "normalBossDropId:" + normalBossDropId + ","
        + "bossDropID:" + bossDropID + ","
        + "curseBoxDropID:" + curseBoxDropID + ","
        + "bossLevelEventID:" + bossLevelEventID + ","
        + "attributes:" + attributes + ","
        + "normalBattleAttr:" + normalBattleAttr + ","
        + "eliteBattleAttr:" + eliteBattleAttr + ","
        + "bossBattleAttr:" + bossBattleAttr + ","
        + "mapId:" + mapId + ","
        + "campEventPointId:" + campEventPointId + ","
        + "campOffset:" + Luban.StringUtil.CollectionToString(campOffset) + ","
        + "jumpPower:" + jumpPower + ","
        + "speedAdd:" + speedAdd + ","
        + "}";
    }
}
}

