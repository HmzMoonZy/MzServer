
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class GameMember_member : Luban.BeanBase
{
    public GameMember_member(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        modelID = (int)_obj.GetValue("modelID");
        skinModelID = (int)_obj.GetValue("skinModelID");
        { var __json0 = _obj.GetValue("modelScale"); int _n0 = (__json0 as JArray).Count; modelScale = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  modelScale[__index0++] = __v0; }   }
        modelEffectId = (int)_obj.GetValue("modelEffectId");
        nameLanguageID = (string)_obj.GetValue("nameLanguageID");
        infoLanguageID = (int)_obj.GetValue("infoLanguageID");
        iconAtlasID = (int)_obj.GetValue("iconAtlasID");
        iconSpriteName = (string)_obj.GetValue("iconSpriteName");
        memAtlasID = (int)_obj.GetValue("memAtlasID");
        memSpriteName = (string)_obj.GetValue("memSpriteName");
        frameAtlasID = (int)_obj.GetValue("frameAtlasID");
        frameSpriteName = (string)_obj.GetValue("frameSpriteName");
        levelAtlasID = (int)_obj.GetValue("levelAtlasID");
        levelSpriteName = (string)_obj.GetValue("levelSpriteName");
        iconCollectionName = (string)_obj.GetValue("iconCollectionName");
        animEventUINodes = (int)_obj.GetValue("animEventUINodes");
        { var __json0 = _obj.GetValue("showEffectScale"); int _n0 = (__json0 as JArray).Count; showEffectScale = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  showEffectScale[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("showEffectPath"); int _n0 = (__json0 as JArray).Count; showEffectPath = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  showEffectPath[__index0++] = __v0; }   }
        showSkillAnimName = (string)_obj.GetValue("showSkillAnimName");
        showEffectSoundId = (int)_obj.GetValue("showEffectSoundId");
        { var __json0 = _obj.GetValue("showEffectFullScreen"); int _n0 = (__json0 as JArray).Count; showEffectFullScreen = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  showEffectFullScreen[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("showEffectFullScreenOffset"); int _n0 = (__json0 as JArray).Count; showEffectFullScreenOffset = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  showEffectFullScreenOffset[__index0++] = __v0; }   }
        isMainMember = (int)_obj.GetValue("isMainMember");
        roleType = (int)_obj.GetValue("roleType");
        meatType = (int)_obj.GetValue("meatType");
        aiTypeID = (int)_obj.GetValue("aiTypeID");
        parameters = (string)_obj.GetValue("parameters");
        skillIDs = (string)_obj.GetValue("skillIDs");
        baseAttributes = (string)_obj.GetValue("baseAttributes");
        hitEffectID = (int)_obj.GetValue("hitEffectID");
        appearSoundID = (int)_obj.GetValue("appearSoundID");
        hitSoundID = (int)_obj.GetValue("hitSoundID");
        dieSoundID = (int)_obj.GetValue("dieSoundID");
        { var __json0 = _obj.GetValue("dropExp"); int _n0 = (__json0 as JArray).Count; dropExp = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  dropExp[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("dropShell"); int _n0 = (__json0 as JArray).Count; dropShell = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  dropShell[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("dropCoin"); int _n0 = (__json0 as JArray).Count; dropCoin = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  dropCoin[__index0++] = __v0; }   }
        initSkinID = (int)_obj.GetValue("initSkinID");
        isShowRecharge = (int)_obj.GetValue("isShowRecharge");
        npcFunction = (int)_obj.GetValue("npcFunction");
        { var __json0 = _obj.GetValue("rotation"); int _n0 = (__json0 as JArray).Count; rotation = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  rotation[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("offsetPos"); int _n0 = (__json0 as JArray).Count; offsetPos = new float[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { float __v0;  __v0 = (float)__e0;  offsetPos[__index0++] = __v0; }   }
        parachuteSkin = (int)_obj.GetValue("parachuteSkin");
    }

    public static GameMember_member DeserializeGameMember_member(JToken _buf)
    {
        return new GameMember_member(_buf);
    }

    /// <summary>
    /// 内容ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 模型ID
    /// </summary>
    public readonly int modelID;
    /// <summary>
    /// 藏品模型
    /// </summary>
    public readonly int skinModelID;
    /// <summary>
    /// 模型大小
    /// </summary>
    public readonly float[] modelScale;
    /// <summary>
    /// 模型特效
    /// </summary>
    public readonly int modelEffectId;
    /// <summary>
    /// 名称多语言ID
    /// </summary>
    public readonly string nameLanguageID;
    /// <summary>
    /// 介绍多语言ID
    /// </summary>
    public readonly int infoLanguageID;
    /// <summary>
    /// icon图集ID
    /// </summary>
    public readonly int iconAtlasID;
    /// <summary>
    /// icon切片名称
    /// </summary>
    public readonly string iconSpriteName;
    /// <summary>
    /// 头像图集ID
    /// </summary>
    public readonly int memAtlasID;
    /// <summary>
    /// 头像图标名称
    /// </summary>
    public readonly string memSpriteName;
    /// <summary>
    /// 头像框图集ID
    /// </summary>
    public readonly int frameAtlasID;
    /// <summary>
    /// 头像框图标名称
    /// </summary>
    public readonly string frameSpriteName;
    /// <summary>
    /// 品质底图图集ID
    /// </summary>
    public readonly int levelAtlasID;
    /// <summary>
    /// 品质底图名称
    /// </summary>
    public readonly string levelSpriteName;
    /// <summary>
    /// 藏品icon名称
    /// </summary>
    public readonly string iconCollectionName;
    /// <summary>
    /// 宠物播放特效在ui上面的时机(帧)
    /// </summary>
    public readonly int animEventUINodes;
    /// <summary>
    /// 显示特效缩放(UI)
    /// </summary>
    public readonly float[] showEffectScale;
    /// <summary>
    /// 展示特效路径（UI）前|后 111
    /// </summary>
    public readonly string[] showEffectPath;
    /// <summary>
    /// 播放技能动作(英雄和至宝宠物ui使用)
    /// </summary>
    public readonly string showSkillAnimName;
    /// <summary>
    /// 展示特效关联的音效(至宝宠物ui使用)
    /// </summary>
    public readonly int showEffectSoundId;
    /// <summary>
    /// 展示特效是否全屏（UI）(针对宠物至宝）前后
    /// </summary>
    public readonly int[] showEffectFullScreen;
    /// <summary>
    /// 特效偏移(按理说全屏的是没有偏移）都是相减（UI）(x|y|x|y  前后针对英雄，宠物至宝不需要)
    /// </summary>
    public readonly int[] showEffectFullScreenOffset;
    /// <summary>
    /// 是否为主角<br/>1-主角
    /// </summary>
    public readonly int isMainMember;
    public readonly int roleType;
    /// <summary>
    /// 肉质类型：<br/>1.石头人<br/>2.果冻人<br/>3.盔甲/巨人<br/>4.骷髅
    /// </summary>
    public readonly int meatType;
    /// <summary>
    /// AI ID<br/>1:默认
    /// </summary>
    public readonly int aiTypeID;
    /// <summary>
    /// AI 参数
    /// </summary>
    public readonly string parameters;
    /// <summary>
    /// 技能ID|
    /// </summary>
    public readonly string skillIDs;
    /// <summary>
    /// 基础属性
    /// </summary>
    public readonly string baseAttributes;
    /// <summary>
    /// 受击特效ID
    /// </summary>
    public readonly int hitEffectID;
    /// <summary>
    /// 出场音效：<br/>Sound表ID
    /// </summary>
    public readonly int appearSoundID;
    /// <summary>
    /// 受击音效：<br/>Sound表ID
    /// </summary>
    public readonly int hitSoundID;
    /// <summary>
    /// 死亡音效：<br/>Sound表ID
    /// </summary>
    public readonly int dieSoundID;
    /// <summary>
    /// 经验(战斗）<br/>最小值|最大值
    /// </summary>
    public readonly int[] dropExp;
    /// <summary>
    /// 贝壳(战斗）<br/>最小值|最大值
    /// </summary>
    public readonly int[] dropShell;
    /// <summary>
    /// 玩家金币<br/>最小值|最大值
    /// </summary>
    public readonly int[] dropCoin;
    /// <summary>
    /// 初始皮肤ID
    /// </summary>
    public readonly int initSkinID;
    /// <summary>
    /// 是否显示怒气条<br/>主角默认显示，敌人需要配置
    /// </summary>
    public readonly int isShowRecharge;
    /// <summary>
    /// npc功能
    /// </summary>
    public readonly int npcFunction;
    /// <summary>
    /// 模型旋转角度<br/>分别为x,y,z轴
    /// </summary>
    public readonly float[] rotation;
    /// <summary>
    /// 偏移坐标
    /// </summary>
    public readonly float[] offsetPos;
    /// <summary>
    /// 降落伞皮肤<br/>skin表id
    /// </summary>
    public readonly int parachuteSkin;


    public const int __ID__ = 147020013;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "modelID:" + modelID + ","
        + "skinModelID:" + skinModelID + ","
        + "modelScale:" + Luban.StringUtil.CollectionToString(modelScale) + ","
        + "modelEffectId:" + modelEffectId + ","
        + "nameLanguageID:" + nameLanguageID + ","
        + "infoLanguageID:" + infoLanguageID + ","
        + "iconAtlasID:" + iconAtlasID + ","
        + "iconSpriteName:" + iconSpriteName + ","
        + "memAtlasID:" + memAtlasID + ","
        + "memSpriteName:" + memSpriteName + ","
        + "frameAtlasID:" + frameAtlasID + ","
        + "frameSpriteName:" + frameSpriteName + ","
        + "levelAtlasID:" + levelAtlasID + ","
        + "levelSpriteName:" + levelSpriteName + ","
        + "iconCollectionName:" + iconCollectionName + ","
        + "animEventUINodes:" + animEventUINodes + ","
        + "showEffectScale:" + Luban.StringUtil.CollectionToString(showEffectScale) + ","
        + "showEffectPath:" + Luban.StringUtil.CollectionToString(showEffectPath) + ","
        + "showSkillAnimName:" + showSkillAnimName + ","
        + "showEffectSoundId:" + showEffectSoundId + ","
        + "showEffectFullScreen:" + Luban.StringUtil.CollectionToString(showEffectFullScreen) + ","
        + "showEffectFullScreenOffset:" + Luban.StringUtil.CollectionToString(showEffectFullScreenOffset) + ","
        + "isMainMember:" + isMainMember + ","
        + "roleType:" + roleType + ","
        + "meatType:" + meatType + ","
        + "aiTypeID:" + aiTypeID + ","
        + "parameters:" + parameters + ","
        + "skillIDs:" + skillIDs + ","
        + "baseAttributes:" + baseAttributes + ","
        + "hitEffectID:" + hitEffectID + ","
        + "appearSoundID:" + appearSoundID + ","
        + "hitSoundID:" + hitSoundID + ","
        + "dieSoundID:" + dieSoundID + ","
        + "dropExp:" + Luban.StringUtil.CollectionToString(dropExp) + ","
        + "dropShell:" + Luban.StringUtil.CollectionToString(dropShell) + ","
        + "dropCoin:" + Luban.StringUtil.CollectionToString(dropCoin) + ","
        + "initSkinID:" + initSkinID + ","
        + "isShowRecharge:" + isShowRecharge + ","
        + "npcFunction:" + npcFunction + ","
        + "rotation:" + Luban.StringUtil.CollectionToString(rotation) + ","
        + "offsetPos:" + Luban.StringUtil.CollectionToString(offsetPos) + ","
        + "parachuteSkin:" + parachuteSkin + ","
        + "}";
    }
}
}

