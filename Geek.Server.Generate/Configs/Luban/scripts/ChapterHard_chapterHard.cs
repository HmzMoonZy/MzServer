
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Newtonsoft.Json.Linq;



namespace HotFix.Cfg
{

public sealed partial class ChapterHard_chapterHard : Luban.BeanBase
{
    public ChapterHard_chapterHard(JToken _buf) 
    {
        JObject _obj = _buf as JObject;
        id = (int)_obj.GetValue("id");
        nameId = (string)_obj.GetValue("nameId");
        nameId_back = (string)_obj.GetValue("nameId_back");
        atlasId = (int)_obj.GetValue("atlasId");
        icon = (string)_obj.GetValue("icon");
        unlockChapterID = (int)_obj.GetValue("unlockChapterID");
        mapID = (int)_obj.GetValue("mapID");
        { var __json0 = _obj.GetValue("cost"); int _n0 = (__json0 as JArray).Count; cost = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  cost[__index0++] = __v0; }   }
        itemLimit = (int)_obj.GetValue("itemLimit");
        extraReward = (int)_obj.GetValue("extraReward");
        { var __json0 = _obj.GetValue("rewardStage"); int _n0 = (__json0 as JArray).Count; rewardStage = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  rewardStage[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("reward"); int _n0 = (__json0 as JArray).Count; reward = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  reward[__index0++] = __v0; }   }
        totalWave = (int)_obj.GetValue("totalWave");
        { var __json0 = _obj.GetValue("monsterCfg"); int _n0 = (__json0 as JArray).Count; monsterCfg = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  monsterCfg[__index0++] = __v0; }   }
        firstSelectSkill = (int)_obj.GetValue("firstSelectSkill");
        { var __json0 = _obj.GetValue("otherSelectSkill"); int _n0 = (__json0 as JArray).Count; otherSelectSkill = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  otherSelectSkill[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("dropID"); int _n0 = (__json0 as JArray).Count; dropID = new int[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { int __v0;  __v0 = (int)__e0;  dropID[__index0++] = __v0; }   }
        { var __json0 = _obj.GetValue("buffData"); int _n0 = (__json0 as JArray).Count; buffData = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  buffData[__index0++] = __v0; }   }
        normalBattleAttr = (string)_obj.GetValue("normalBattleAttr");
        eliteBattleAttr = (string)_obj.GetValue("eliteBattleAttr");
        bossBattleAttr = (string)_obj.GetValue("bossBattleAttr");
        speedAdd = (int)_obj.GetValue("speedAdd");
        jumpPower = (string)_obj.GetValue("jumpPower");
        { var __json0 = _obj.GetValue("jumpReward"); int _n0 = (__json0 as JArray).Count; jumpReward = new string[_n0]; int __index0=0; foreach(JToken __e0 in __json0) { string __v0;  __v0 = (string)__e0;  jumpReward[__index0++] = __v0; }   }
    }

    public static ChapterHard_chapterHard DeserializeChapterHard_chapterHard(JToken _buf)
    {
        return new ChapterHard_chapterHard(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 章节名ID
    /// </summary>
    public readonly string nameId;
    /// <summary>
    /// 章节名后缀
    /// </summary>
    public readonly string nameId_back;
    /// <summary>
    /// 图集ID
    /// </summary>
    public readonly int atlasId;
    /// <summary>
    /// icon名称
    /// </summary>
    public readonly string icon;
    /// <summary>
    /// 解锁章节
    /// </summary>
    public readonly int unlockChapterID;
    /// <summary>
    /// 地图ID
    /// </summary>
    public readonly int mapID;
    /// <summary>
    /// 消耗体力<br/>货币id|数量
    /// </summary>
    public readonly int[] cost;
    /// <summary>
    /// 薪火之证最多获得
    /// </summary>
    public readonly int itemLimit;
    /// <summary>
    /// 根据战力差额外获得
    /// </summary>
    public readonly int extraReward;
    /// <summary>
    /// 天数宝箱对应天数
    /// </summary>
    public readonly int[] rewardStage;
    /// <summary>
    /// 天数宝箱对应奖励ID
    /// </summary>
    public readonly int[] reward;
    /// <summary>
    /// 总波次
    /// </summary>
    public readonly int totalWave;
    /// <summary>
    /// 对阵<br/>最小波次,最大波次,事件ID,|
    /// </summary>
    public readonly string[] monsterCfg;
    /// <summary>
    /// 首次选技能
    /// </summary>
    public readonly int firstSelectSkill;
    /// <summary>
    /// 除首次外选技能
    /// </summary>
    public readonly string[] otherSelectSkill;
    /// <summary>
    /// 普通|精英|BOSS<br/>掉落ID
    /// </summary>
    public readonly int[] dropID;
    /// <summary>
    /// 怪物信息<br/>攻击增益|防御增益|生命值增益
    /// </summary>
    public readonly string[] buffData;
    /// <summary>
    /// 普通三围战斗属性加成
    /// </summary>
    public readonly string normalBattleAttr;
    /// <summary>
    /// 精英三围战斗属性加成
    /// </summary>
    public readonly string eliteBattleAttr;
    /// <summary>
    /// boss三围战属性加成
    /// </summary>
    public readonly string bossBattleAttr;
    /// <summary>
    /// 速度加成(万分比)
    /// </summary>
    public readonly int speedAdd;
    /// <summary>
    /// 跳过所需战力
    /// </summary>
    public readonly string jumpPower;
    /// <summary>
    /// 跳过获得奖励
    /// </summary>
    public readonly string[] jumpReward;


    public const int __ID__ = 240072657;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nameId:" + nameId + ","
        + "nameId_back:" + nameId_back + ","
        + "atlasId:" + atlasId + ","
        + "icon:" + icon + ","
        + "unlockChapterID:" + unlockChapterID + ","
        + "mapID:" + mapID + ","
        + "cost:" + Luban.StringUtil.CollectionToString(cost) + ","
        + "itemLimit:" + itemLimit + ","
        + "extraReward:" + extraReward + ","
        + "rewardStage:" + Luban.StringUtil.CollectionToString(rewardStage) + ","
        + "reward:" + Luban.StringUtil.CollectionToString(reward) + ","
        + "totalWave:" + totalWave + ","
        + "monsterCfg:" + Luban.StringUtil.CollectionToString(monsterCfg) + ","
        + "firstSelectSkill:" + firstSelectSkill + ","
        + "otherSelectSkill:" + Luban.StringUtil.CollectionToString(otherSelectSkill) + ","
        + "dropID:" + Luban.StringUtil.CollectionToString(dropID) + ","
        + "buffData:" + Luban.StringUtil.CollectionToString(buffData) + ","
        + "normalBattleAttr:" + normalBattleAttr + ","
        + "eliteBattleAttr:" + eliteBattleAttr + ","
        + "bossBattleAttr:" + bossBattleAttr + ","
        + "speedAdd:" + speedAdd + ","
        + "jumpPower:" + jumpPower + ","
        + "jumpReward:" + Luban.StringUtil.CollectionToString(jumpReward) + ","
        + "}";
    }
}
}

