
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class GameSkillBuild_skillBuild : Luban.BeanBase
{
    public GameSkillBuild_skillBuild(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        kind = _buf.ReadInt();
        heroSource = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);outsideSource = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); outsideSource[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);removeGroupId = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); removeGroupId[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);addGroupId = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); addGroupId[__index0] = __e0;}}
        initShield = _buf.ReadInt();
        unlockChapter = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);source = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); source[__index0] = __e0;}}
        groupId = _buf.ReadInt();
        level = _buf.ReadInt();
        needGroup = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);deleteGroup = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); deleteGroup[__index0] = __e0;}}
        quality = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);cost = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); cost[__index0] = __e0;}}
        weight = _buf.ReadInt();
        tag = _buf.ReadInt();
        attributes = _buf.ReadString();
        recoverHp = _buf.ReadInt();
        skillId = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);compose = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); compose[__index0] = __e0;}}
        composeType = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);showCompose = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); showCompose[__index0] = __e0;}}
        posGroup = _buf.ReadInt();
        mythicLv = _buf.ReadInt();
        mythicBaseSkill = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);mythicSkillInfo = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); mythicSkillInfo[__index0] = __e0;}}
        talentApexId = _buf.ReadInt();
    }

    public static GameSkillBuild_skillBuild DeserializeGameSkillBuild_skillBuild(ByteBuf _buf)
    {
        return new GameSkillBuild_skillBuild(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 技能分类<br/>0：无分类<br/>1：大秘境英杰技能
    /// </summary>
    public readonly int kind;
    /// <summary>
    /// 英雄来源
    /// </summary>
    public readonly int heroSource;
    /// <summary>
    /// 局外来源<br/>1|坐骑id<br/>2|神器id
    /// </summary>
    public readonly int[] outsideSource;
    /// <summary>
    /// 移除技能组<br/>（只有作为英雄连携技加入池时生效）
    /// </summary>
    public readonly int[] removeGroupId;
    /// <summary>
    /// 新增技能组<br/>（只有作为英雄连携技加入池时生效）
    /// </summary>
    public readonly int[] addGroupId;
    /// <summary>
    /// 是否从初始技能池屏蔽<br/>0不屏蔽 1屏蔽
    /// </summary>
    public readonly int initShield;
    /// <summary>
    /// 解锁章节<br/>通关该章节解锁
    /// </summary>
    public readonly int unlockChapter;
    /// <summary>
    /// 可出现途径
    /// </summary>
    public readonly int[] source;
    /// <summary>
    /// 组id
    /// </summary>
    public readonly int groupId;
    /// <summary>
    /// 等级
    /// </summary>
    public readonly int level;
    /// <summary>
    /// 前置条件<br/>“&amp;”为与关系；“|”为或关系<br/>“|”和“&amp;”不能同时出现
    /// </summary>
    public readonly string needGroup;
    /// <summary>
    /// 选中后删除指定组
    /// </summary>
    public readonly int[] deleteGroup;
    /// <summary>
    /// 品质
    /// </summary>
    public readonly int quality;
    /// <summary>
    /// 价格类型|价格
    /// </summary>
    public readonly int[] cost;
    /// <summary>
    /// 权重
    /// </summary>
    public readonly int weight;
    /// <summary>
    /// 标签
    /// </summary>
    public readonly int tag;
    /// <summary>
    /// 属性加成
    /// </summary>
    public readonly string attributes;
    /// <summary>
    /// 立即回复血量%
    /// </summary>
    public readonly int recoverHp;
    /// <summary>
    /// 技能
    /// </summary>
    public readonly int skillId;
    /// <summary>
    /// 所需组合
    /// </summary>
    public readonly int[] compose;
    /// <summary>
    /// 组合类型
    /// </summary>
    public readonly int composeType;
    /// <summary>
    /// 展示用套装组合
    /// </summary>
    public readonly int[] showCompose;
    /// <summary>
    /// 插槽组<br/>(仅用于秘境展示）
    /// </summary>
    public readonly int posGroup;
    /// <summary>
    /// 秘境技能等级
    /// </summary>
    public readonly int mythicLv;
    /// <summary>
    /// 秘境基础技能<br/>0否<br/>1主动技能<br/>2被动技能
    /// </summary>
    public readonly int mythicBaseSkill;
    /// <summary>
    /// 基础信息<br/>主动技能-系数百分比|类型多语言|冷却回合数|首回合冷却<br/>被动技能-类型多语言
    /// </summary>
    public readonly string[] mythicSkillInfo;
    /// <summary>
    /// 巅峰天赋技能对应id
    /// </summary>
    public readonly int talentApexId;
   
    public const int __ID__ = 583905421;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "kind:" + kind + ","
        + "heroSource:" + heroSource + ","
        + "outsideSource:" + Luban.StringUtil.CollectionToString(outsideSource) + ","
        + "removeGroupId:" + Luban.StringUtil.CollectionToString(removeGroupId) + ","
        + "addGroupId:" + Luban.StringUtil.CollectionToString(addGroupId) + ","
        + "initShield:" + initShield + ","
        + "unlockChapter:" + unlockChapter + ","
        + "source:" + Luban.StringUtil.CollectionToString(source) + ","
        + "groupId:" + groupId + ","
        + "level:" + level + ","
        + "needGroup:" + needGroup + ","
        + "deleteGroup:" + Luban.StringUtil.CollectionToString(deleteGroup) + ","
        + "quality:" + quality + ","
        + "cost:" + Luban.StringUtil.CollectionToString(cost) + ","
        + "weight:" + weight + ","
        + "tag:" + tag + ","
        + "attributes:" + attributes + ","
        + "recoverHp:" + recoverHp + ","
        + "skillId:" + skillId + ","
        + "compose:" + Luban.StringUtil.CollectionToString(compose) + ","
        + "composeType:" + composeType + ","
        + "showCompose:" + Luban.StringUtil.CollectionToString(showCompose) + ","
        + "posGroup:" + posGroup + ","
        + "mythicLv:" + mythicLv + ","
        + "mythicBaseSkill:" + mythicBaseSkill + ","
        + "mythicSkillInfo:" + Luban.StringUtil.CollectionToString(mythicSkillInfo) + ","
        + "talentApexId:" + talentApexId + ","
        + "}";
    }
}

}

