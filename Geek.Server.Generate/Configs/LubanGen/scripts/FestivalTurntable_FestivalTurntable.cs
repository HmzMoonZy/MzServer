
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class FestivalTurntable_FestivalTurntable : Luban.BeanBase
{
    public FestivalTurntable_FestivalTurntable(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        openTime = _buf.ReadString();
        endTime = _buf.ReadString();
        openTimeCN = _buf.ReadString();
        endTimeCN = _buf.ReadString();
        shopGroup = _buf.ReadInt();
        payGroup = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);gridType = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); gridType[__index0] = __e0;}}
        atlasId = _buf.ReadInt();
        priceId = _buf.ReadInt();
        singlePrice = _buf.ReadInt();
        tenPrice = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);poolTimes = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); poolTimes[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);pool = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); pool[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);rate = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); rate[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);showRate = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); showRate[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);showRateBig = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); showRateBig[__index0] = __e0;}}
        miniPityCount = _buf.ReadInt();
        miniPityRate = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);limitItems = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); limitItems[__index0] = __e0;}}
        bigPityCount = _buf.ReadInt();
        timesRewardID = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);delItems = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); delItems[__index0] = __e0;}}
        ProdMailTempId = _buf.ReadString();
        HasExchangeShop = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ShopRes = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); ShopRes[__index0] = __e0;}}
        ShopObjBg = _buf.ReadString();
        ShopTitleNameId = _buf.ReadString();
        GiftBanner = _buf.ReadString();
        GameplayEndTime = _buf.ReadInt();
    }

    public static FestivalTurntable_FestivalTurntable DeserializeFestivalTurntable_FestivalTurntable(ByteBuf _buf)
    {
        return new FestivalTurntable_FestivalTurntable(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 开始时间
    /// </summary>
    public readonly string openTime;
    /// <summary>
    /// 结束时间
    /// </summary>
    public readonly string endTime;
    /// <summary>
    /// 开始时间
    /// </summary>
    public readonly string openTimeCN;
    /// <summary>
    /// 结束时间
    /// </summary>
    public readonly string endTimeCN;
    /// <summary>
    /// 商店组<br/>不配则无商店兑换
    /// </summary>
    public readonly int shopGroup;
    /// <summary>
    /// 礼包组<br/>不配则无商店兑换
    /// </summary>
    public readonly int payGroup;
    /// <summary>
    /// 格子类型<br/>0:普通<br/>1:小奖<br/>3:终极<br/>，前面类型<br/>，后面格子index<br/>
    /// </summary>
    public readonly string[] gridType;
    /// <summary>
    /// 图集id
    /// </summary>
    public readonly int atlasId;
    /// <summary>
    /// 消耗物品Id
    /// </summary>
    public readonly int priceId;
    /// <summary>
    /// 单抽消耗<br/>物品数量
    /// </summary>
    public readonly int singlePrice;
    /// <summary>
    /// 十连消耗<br/>物品数量
    /// </summary>
    public readonly int tenPrice;
    /// <summary>
    /// 抽取多少次切换池子
    /// </summary>
    public readonly string[] poolTimes;
    /// <summary>
    /// 池子
    /// </summary>
    public readonly string[] pool;
    /// <summary>
    /// 概率
    /// </summary>
    public readonly string[] rate;
    /// <summary>
    /// 展示概率(万分比)
    /// </summary>
    public readonly string[] showRate;
    /// <summary>
    /// 展示概率(万分比)
    /// </summary>
    public readonly string[] showRateBig;
    /// <summary>
    /// 小保底次数
    /// </summary>
    public readonly int miniPityCount;
    /// <summary>
    /// 小保底抽卡池|小保底重置池
    /// </summary>
    public readonly int miniPityRate;
    /// <summary>
    /// 小保底限定物品|限定次数
    /// </summary>
    public readonly string[] limitItems;
    /// <summary>
    /// 大保底次数
    /// </summary>
    public readonly int bigPityCount;
    /// <summary>
    /// 次数奖励ID
    /// </summary>
    public readonly int timesRewardID;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] delItems;
    /// <summary>
    /// 正式服奖励邮件
    /// </summary>
    public readonly string ProdMailTempId;
    /// <summary>
    /// 是否拥有兑换商店
    /// </summary>
    public readonly int HasExchangeShop;
    /// <summary>
    /// 商店组上展示的道具id列表
    /// </summary>
    public readonly int[] ShopRes;
    /// <summary>
    /// 商品背景图
    /// </summary>
    public readonly string ShopObjBg;
    /// <summary>
    /// 商店组名字Id
    /// </summary>
    public readonly string ShopTitleNameId;
    /// <summary>
    /// 礼包Banner图
    /// </summary>
    public readonly string GiftBanner;
    /// <summary>
    /// 服务器结束时间-几天为结束
    /// </summary>
    public readonly int GameplayEndTime;
   
    public const int __ID__ = -1341871437;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "openTime:" + openTime + ","
        + "endTime:" + endTime + ","
        + "openTimeCN:" + openTimeCN + ","
        + "endTimeCN:" + endTimeCN + ","
        + "shopGroup:" + shopGroup + ","
        + "payGroup:" + payGroup + ","
        + "gridType:" + Luban.StringUtil.CollectionToString(gridType) + ","
        + "atlasId:" + atlasId + ","
        + "priceId:" + priceId + ","
        + "singlePrice:" + singlePrice + ","
        + "tenPrice:" + tenPrice + ","
        + "poolTimes:" + Luban.StringUtil.CollectionToString(poolTimes) + ","
        + "pool:" + Luban.StringUtil.CollectionToString(pool) + ","
        + "rate:" + Luban.StringUtil.CollectionToString(rate) + ","
        + "showRate:" + Luban.StringUtil.CollectionToString(showRate) + ","
        + "showRateBig:" + Luban.StringUtil.CollectionToString(showRateBig) + ","
        + "miniPityCount:" + miniPityCount + ","
        + "miniPityRate:" + miniPityRate + ","
        + "limitItems:" + Luban.StringUtil.CollectionToString(limitItems) + ","
        + "bigPityCount:" + bigPityCount + ","
        + "timesRewardID:" + timesRewardID + ","
        + "delItems:" + Luban.StringUtil.CollectionToString(delItems) + ","
        + "ProdMailTempId:" + ProdMailTempId + ","
        + "HasExchangeShop:" + HasExchangeShop + ","
        + "ShopRes:" + Luban.StringUtil.CollectionToString(ShopRes) + ","
        + "ShopObjBg:" + ShopObjBg + ","
        + "ShopTitleNameId:" + ShopTitleNameId + ","
        + "GiftBanner:" + GiftBanner + ","
        + "GameplayEndTime:" + GameplayEndTime + ","
        + "}";
    }
}

}

