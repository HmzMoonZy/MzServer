
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class TalentLegacy_summonLegacy : Luban.BeanBase
{
    public TalentLegacy_summonLegacy(ByteBuf _buf) 
    {
        id = _buf.ReadInt();
        orderId = _buf.ReadInt();
        freeTimes = _buf.ReadInt();
        priceId = _buf.ReadInt();
        singlePrice = _buf.ReadInt();
        singlePriceOrigin = _buf.ReadInt();
        tenPrice = _buf.ReadInt();
        tenPriceOrigin = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);choosePoolRateShow = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); choosePoolRateShow[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);rateShow = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); rateShow[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);normalPool = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); normalPool[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);miniPool = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); miniPool[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);miniPoint = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); miniPoint[__index0] = __e0;}}
        choosePool = _buf.ReadInt();
        miniCount = _buf.ReadInt();
        miniTimes = _buf.ReadInt();
        miniRate = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);goldGet = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); goldGet[__index0] = __e0;}}
        limitTimes = _buf.ReadInt();
    }

    public static TalentLegacy_summonLegacy DeserializeTalentLegacy_summonLegacy(ByteBuf _buf)
    {
        return new TalentLegacy_summonLegacy(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int id;
    /// <summary>
    /// 排序Id
    /// </summary>
    public readonly int orderId;
    /// <summary>
    /// 每日免费次数
    /// </summary>
    public readonly int freeTimes;
    /// <summary>
    /// 消耗物品Id
    /// </summary>
    public readonly int priceId;
    /// <summary>
    /// 单抽消耗<br/>物品数量
    /// </summary>
    public readonly int singlePrice;
    /// <summary>
    /// 单抽原始价格(钻石)<br/>大于0生效
    /// </summary>
    public readonly int singlePriceOrigin;
    /// <summary>
    /// 十连消耗<br/>物品数量
    /// </summary>
    public readonly int tenPrice;
    /// <summary>
    /// 十连原价(钻石)<br/>大于0生效
    /// </summary>
    public readonly int tenPriceOrigin;
    /// <summary>
    /// 大保底池概率展示<br/>卡池,文本|卡池,文本
    /// </summary>
    public readonly string[] choosePoolRateShow;
    /// <summary>
    /// 抽卡概率展示ID<br/>卡池,展示概率,文本,颜色|卡池,展示概率,文本,颜色
    /// </summary>
    public readonly string[] rateShow;
    /// <summary>
    /// 抽卡概率
    /// </summary>
    public readonly string[] normalPool;
    /// <summary>
    /// 小保底池-传承技池
    /// </summary>
    public readonly string[] miniPool;
    /// <summary>
    /// 小保底池-积分
    /// </summary>
    public readonly string[] miniPoint;
    /// <summary>
    /// 积分保底池
    /// </summary>
    public readonly int choosePool;
    /// <summary>
    /// 小保底所需次数
    /// </summary>
    public readonly int miniCount;
    /// <summary>
    /// 小保底获得/额外抽取对应次数
    /// </summary>
    public readonly int miniTimes;
    /// <summary>
    /// 额外抽卡保底单次概率
    /// </summary>
    public readonly int miniRate;
    /// <summary>
    /// 每次抽取附赠道具,数量（国内版本）
    /// </summary>
    public readonly string[] goldGet;
    /// <summary>
    /// 每个宝箱限定抽卡次数（国内版本）
    /// </summary>
    public readonly int limitTimes;
   
    public const int __ID__ = 452456468;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "orderId:" + orderId + ","
        + "freeTimes:" + freeTimes + ","
        + "priceId:" + priceId + ","
        + "singlePrice:" + singlePrice + ","
        + "singlePriceOrigin:" + singlePriceOrigin + ","
        + "tenPrice:" + tenPrice + ","
        + "tenPriceOrigin:" + tenPriceOrigin + ","
        + "choosePoolRateShow:" + Luban.StringUtil.CollectionToString(choosePoolRateShow) + ","
        + "rateShow:" + Luban.StringUtil.CollectionToString(rateShow) + ","
        + "normalPool:" + Luban.StringUtil.CollectionToString(normalPool) + ","
        + "miniPool:" + Luban.StringUtil.CollectionToString(miniPool) + ","
        + "miniPoint:" + Luban.StringUtil.CollectionToString(miniPoint) + ","
        + "choosePool:" + choosePool + ","
        + "miniCount:" + miniCount + ","
        + "miniTimes:" + miniTimes + ","
        + "miniRate:" + miniRate + ","
        + "goldGet:" + Luban.StringUtil.CollectionToString(goldGet) + ","
        + "limitTimes:" + limitTimes + ","
        + "}";
    }
}

}

