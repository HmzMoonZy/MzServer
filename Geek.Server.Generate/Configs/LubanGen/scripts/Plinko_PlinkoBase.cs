
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class Plinko_PlinkoBase : Luban.BeanBase
{
    public Plinko_PlinkoBase(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        ConnectActivityId = _buf.ReadInt();
        PlinkoCostItem = _buf.ReadInt();
        Plinko = _buf.ReadInt();
        Plinko1 = _buf.ReadInt();
        ScoreItem = _buf.ReadInt();
        ScoreItem1 = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);PlinkoExchangeItem = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); PlinkoExchangeItem[__index0] = __e0;}}
        PlinkoCostItemPrice = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimit = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimit[__index0] = __e0;}}
        BuyLimitNum = _buf.ReadInt();
        DefaultPlinkoCostItem = _buf.ReadInt();
        Score = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);PositionMultiple = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); PositionMultiple[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);TurnNumInitialSeed = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); TurnNumInitialSeed[__index0] = __e0;}}
        PositionMultipleLimit = _buf.ReadInt();
        DropBallNumber = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SpecialPositionNeedNumber = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SpecialPositionNeedNumber[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SpecialRewardsInitialSeed = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SpecialRewardsInitialSeed[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SpecialPositionRewards = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SpecialPositionRewards[__index0] = __e0;}}
        SpecialRewardDropBallNumber = _buf.ReadInt();
        SpecialRewardNumbeer = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BigReward = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BigReward[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MailItems = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); MailItems[__index0] = __e0;}}
        MailId = _buf.ReadString();
    }

    public static Plinko_PlinkoBase DeserializePlinko_PlinkoBase(ByteBuf _buf)
    {
        return new Plinko_PlinkoBase(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 关联的活动ID<br/>EventOpenTime表ID
    /// </summary>
    public readonly int ConnectActivityId;
    /// <summary>
    /// 任务道具抽奖券
    /// </summary>
    public readonly int PlinkoCostItem;
    /// <summary>
    /// 普通模式掉落的小球
    /// </summary>
    public readonly int Plinko;
    /// <summary>
    /// 特殊模式掉落的小球
    /// </summary>
    public readonly int Plinko1;
    /// <summary>
    /// 积分道具
    /// </summary>
    public readonly int ScoreItem;
    /// <summary>
    /// 高级兑换道具
    /// </summary>
    public readonly int ScoreItem1;
    /// <summary>
    /// 任务道具|兑换个数
    /// </summary>
    public readonly int[] PlinkoExchangeItem;
    /// <summary>
    /// 任务道具道具售价，钻石
    /// </summary>
    public readonly int PlinkoCostItemPrice;
    /// <summary>
    /// 根据钻石余量设定单次购买材料上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit;
    /// <summary>
    /// 购买券数量上限
    /// </summary>
    public readonly int BuyLimitNum;
    /// <summary>
    /// 初始给道具数量
    /// </summary>
    public readonly int DefaultPlinkoCostItem;
    /// <summary>
    /// 每个球基础积分
    /// </summary>
    public readonly int Score;
    /// <summary>
    /// 第N个位置掉落道具，掉落道具在该位置的权重<br/>基础掉落时，每次不放回抽取
    /// </summary>
    public readonly string[] PositionMultiple;
    /// <summary>
    /// 每组小球的随机起点，循环
    /// </summary>
    public readonly int[] TurnNumInitialSeed;
    /// <summary>
    /// 当剩余数量小于次数时，补充下一轮的掉落基础循环次数
    /// </summary>
    public readonly int PositionMultipleLimit;
    /// <summary>
    /// 每次最大放的小球个数次数
    /// </summary>
    public readonly int DropBallNumber;
    /// <summary>
    /// 特殊球的位置对应的需要掉落进入的球个数
    /// </summary>
    public readonly int[] SpecialPositionNeedNumber;
    /// <summary>
    /// 特殊模式中中奖个数的随机点
    /// </summary>
    public readonly int[] SpecialRewardsInitialSeed;
    /// <summary>
    /// 特殊模式下，位置对应的中奖需要个数
    /// </summary>
    public readonly int[] SpecialPositionRewards;
    /// <summary>
    /// 每次特殊模式掉落的小球总数
    /// </summary>
    public readonly int SpecialRewardDropBallNumber;
    /// <summary>
    /// 每次特殊模式总的抽取奖励个数
    /// </summary>
    public readonly int SpecialRewardNumbeer;
    /// <summary>
    /// 累计进度奖励：<br/>累计进度数量，奖励表ID|
    /// </summary>
    public readonly string[] BigReward;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] MailItems;
    /// <summary>
    /// 邮件ID<br/>测试服,正式服一致
    /// </summary>
    public readonly string MailId;
   
    public const int __ID__ = -2055195408;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ConnectActivityId:" + ConnectActivityId + ","
        + "PlinkoCostItem:" + PlinkoCostItem + ","
        + "Plinko:" + Plinko + ","
        + "Plinko1:" + Plinko1 + ","
        + "ScoreItem:" + ScoreItem + ","
        + "ScoreItem1:" + ScoreItem1 + ","
        + "PlinkoExchangeItem:" + Luban.StringUtil.CollectionToString(PlinkoExchangeItem) + ","
        + "PlinkoCostItemPrice:" + PlinkoCostItemPrice + ","
        + "BuyLimit:" + Luban.StringUtil.CollectionToString(BuyLimit) + ","
        + "BuyLimitNum:" + BuyLimitNum + ","
        + "DefaultPlinkoCostItem:" + DefaultPlinkoCostItem + ","
        + "Score:" + Score + ","
        + "PositionMultiple:" + Luban.StringUtil.CollectionToString(PositionMultiple) + ","
        + "TurnNumInitialSeed:" + Luban.StringUtil.CollectionToString(TurnNumInitialSeed) + ","
        + "PositionMultipleLimit:" + PositionMultipleLimit + ","
        + "DropBallNumber:" + DropBallNumber + ","
        + "SpecialPositionNeedNumber:" + Luban.StringUtil.CollectionToString(SpecialPositionNeedNumber) + ","
        + "SpecialRewardsInitialSeed:" + Luban.StringUtil.CollectionToString(SpecialRewardsInitialSeed) + ","
        + "SpecialPositionRewards:" + Luban.StringUtil.CollectionToString(SpecialPositionRewards) + ","
        + "SpecialRewardDropBallNumber:" + SpecialRewardDropBallNumber + ","
        + "SpecialRewardNumbeer:" + SpecialRewardNumbeer + ","
        + "BigReward:" + Luban.StringUtil.CollectionToString(BigReward) + ","
        + "MailItems:" + Luban.StringUtil.CollectionToString(MailItems) + ","
        + "MailId:" + MailId + ","
        + "}";
    }
}

}

