
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace HotFix.Cfg
{
public sealed partial class EventDive_DiveBase : Luban.BeanBase
{
    public EventDive_DiveBase(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        ConnectActivityId = _buf.ReadInt();
        DiveItem = _buf.ReadInt();
        DivePrice = _buf.ReadInt();
        DivePrice1 = _buf.ReadInt();
        DivePrice2 = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimit = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimit[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimit1 = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimit1[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimit2 = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimit2[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuyLimitNum = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BuyLimitNum[__index0] = __e0;}}
        DefaultDive = _buf.ReadInt();
        DivePropA = _buf.ReadInt();
        DivePropB = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ExchangeItem = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); ExchangeItem[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);RewardProb = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); RewardProb[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GenerateGap = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); GenerateGap[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BigReward = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); BigReward[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MailItems = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); MailItems[__index0] = __e0;}}
        BgmID = _buf.ReadInt();
        MailItemsId = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SpeedRates = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); SpeedRates[__index0] = __e0;}}
    }

    public static EventDive_DiveBase DeserializeEventDive_DiveBase(ByteBuf _buf)
    {
        return new EventDive_DiveBase(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 关联的活动ID<br/>EventOpenTime表ID
    /// </summary>
    public readonly int ConnectActivityId;
    /// <summary>
    /// 潜水道具
    /// </summary>
    public readonly int DiveItem;
    /// <summary>
    /// 水母道具售价，钻石
    /// </summary>
    public readonly int DivePrice;
    /// <summary>
    /// 炸弹道具售价，钻石
    /// </summary>
    public readonly int DivePrice1;
    /// <summary>
    /// 手电筒道具售价，钻石
    /// </summary>
    public readonly int DivePrice2;
    /// <summary>
    /// 根据钻石余量设定单次购买材料上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit;
    /// <summary>
    /// 根据钻石余量设定单次购买材料上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit1;
    /// <summary>
    /// 根据钻石余量设定单次购买材料上限<br/>最小数,最大数,上限|...
    /// </summary>
    public readonly string[] BuyLimit2;
    /// <summary>
    /// 水母|炸弹|手电筒总购买次数
    /// </summary>
    public readonly string[] BuyLimitNum;
    /// <summary>
    /// 初始给道具数量
    /// </summary>
    public readonly int DefaultDive;
    /// <summary>
    /// 清除列道具（手电筒）
    /// </summary>
    public readonly int DivePropA;
    /// <summary>
    /// 清除一片道具（炸弹）
    /// </summary>
    public readonly int DivePropB;
    /// <summary>
    /// 兑换物ID
    /// </summary>
    public readonly int[] ExchangeItem;
    /// <summary>
    /// 气泡格子会出现奖励（DiveSpecial）的概率百分比<br/>1：标准<br/>2：补强库（奖励太少了走这个）<br/>3：补弱库（奖励太多了走这个）
    /// </summary>
    public readonly int[] RewardProb;
    /// <summary>
    /// 生成的块直接的行数差范围<br/>（随到两次0之后，第三次固定不会随到0）
    /// </summary>
    public readonly string[] GenerateGap;
    /// <summary>
    /// 累计深度奖励：<br/>累计深度，掉落表ID|
    /// </summary>
    public readonly string[] BigReward;
    /// <summary>
    /// 活动结束时，以下这些道具兑换为金币<br/>道具ID，金币数量|
    /// </summary>
    public readonly string[] MailItems;
    /// <summary>
    /// 背景音乐ID
    /// </summary>
    public readonly int BgmID;
    /// <summary>
    /// 道具转为金币邮件模板ID<br/>测试服|正式服
    /// </summary>
    public readonly string MailItemsId;
    /// <summary>
    /// 达到一定抽数动画速度倍率
    /// </summary>
    public readonly string[] SpeedRates;
   
    public const int __ID__ = -1062310762;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "ConnectActivityId:" + ConnectActivityId + ","
        + "DiveItem:" + DiveItem + ","
        + "DivePrice:" + DivePrice + ","
        + "DivePrice1:" + DivePrice1 + ","
        + "DivePrice2:" + DivePrice2 + ","
        + "BuyLimit:" + Luban.StringUtil.CollectionToString(BuyLimit) + ","
        + "BuyLimit1:" + Luban.StringUtil.CollectionToString(BuyLimit1) + ","
        + "BuyLimit2:" + Luban.StringUtil.CollectionToString(BuyLimit2) + ","
        + "BuyLimitNum:" + Luban.StringUtil.CollectionToString(BuyLimitNum) + ","
        + "DefaultDive:" + DefaultDive + ","
        + "DivePropA:" + DivePropA + ","
        + "DivePropB:" + DivePropB + ","
        + "ExchangeItem:" + Luban.StringUtil.CollectionToString(ExchangeItem) + ","
        + "RewardProb:" + Luban.StringUtil.CollectionToString(RewardProb) + ","
        + "GenerateGap:" + Luban.StringUtil.CollectionToString(GenerateGap) + ","
        + "BigReward:" + Luban.StringUtil.CollectionToString(BigReward) + ","
        + "MailItems:" + Luban.StringUtil.CollectionToString(MailItems) + ","
        + "BgmID:" + BgmID + ","
        + "MailItemsId:" + MailItemsId + ","
        + "SpeedRates:" + Luban.StringUtil.CollectionToString(SpeedRates) + ","
        + "}";
    }
}

}

